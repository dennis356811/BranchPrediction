circuit Top :
  module Reg_PC :
    input clock : Clock
    input reset : Reset
    output io : { flip stall : UInt<1>, flip next_pc : UInt<32>, current_pc : UInt<32>}

    reg PC_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_PC.scala 12:35]
    when io.stall : @[Reg_PC.scala 14:17]
      PC_REG <= PC_REG @[Reg_PC.scala 15:12]
    else :
      PC_REG <= io.next_pc @[Reg_PC.scala 17:12]
    io.current_pc <= PC_REG @[Reg_PC.scala 20:24]

  module SRAM :
    input clock : Clock
    input reset : Reset
    output io : { flip w_en : UInt<4>, flip address : UInt<16>, flip write_data : UInt<32>, read_data : UInt<32>}

    cmem mem : UInt<8> [65536] @[SRAM.scala 13:16]
    node _T = neq(io.w_en, UInt<1>("h0")) @[SRAM.scala 16:16]
    when _T : @[SRAM.scala 16:25]
      node _T_1 = bits(io.w_en, 0, 0) @[SRAM.scala 17:17]
      when _T_1 : @[SRAM.scala 17:22]
        node _T_2 = bits(io.write_data, 7, 0) @[SRAM.scala 17:59]
        write mport MPORT = mem[io.address], clock
        MPORT <= _T_2
      node _T_3 = bits(io.w_en, 1, 1) @[SRAM.scala 18:17]
      when _T_3 : @[SRAM.scala 18:22]
        node _T_4 = add(io.address, UInt<1>("h1")) @[SRAM.scala 18:45]
        node _T_5 = tail(_T_4, 1) @[SRAM.scala 18:45]
        node _T_6 = bits(io.write_data, 15, 8) @[SRAM.scala 18:65]
        write mport MPORT_1 = mem[_T_5], clock
        MPORT_1 <= _T_6
      node _T_7 = bits(io.w_en, 2, 2) @[SRAM.scala 19:17]
      when _T_7 : @[SRAM.scala 19:22]
        node _T_8 = add(io.address, UInt<2>("h2")) @[SRAM.scala 19:45]
        node _T_9 = tail(_T_8, 1) @[SRAM.scala 19:45]
        node _T_10 = bits(io.write_data, 23, 16) @[SRAM.scala 19:65]
        write mport MPORT_2 = mem[_T_9], clock
        MPORT_2 <= _T_10
      node _T_11 = bits(io.w_en, 3, 3) @[SRAM.scala 20:17]
      when _T_11 : @[SRAM.scala 20:22]
        node _T_12 = add(io.address, UInt<2>("h3")) @[SRAM.scala 20:45]
        node _T_13 = tail(_T_12, 1) @[SRAM.scala 20:45]
        node _T_14 = bits(io.write_data, 31, 24) @[SRAM.scala 20:65]
        write mport MPORT_3 = mem[_T_13], clock
        MPORT_3 <= _T_14
    wire read_data_bytes : UInt<8>[4] @[SRAM.scala 24:32]
    read_data_bytes[0] <= UInt<8>("h0") @[SRAM.scala 24:32]
    read_data_bytes[1] <= UInt<8>("h0") @[SRAM.scala 24:32]
    read_data_bytes[2] <= UInt<8>("h0") @[SRAM.scala 24:32]
    read_data_bytes[3] <= UInt<8>("h0") @[SRAM.scala 24:32]
    read mport read_data_bytes_0_MPORT = mem[io.address], clock @[SRAM.scala 25:33]
    read_data_bytes[0] <= read_data_bytes_0_MPORT @[SRAM.scala 25:22]
    node _read_data_bytes_1_T = add(io.address, UInt<1>("h1")) @[SRAM.scala 26:45]
    node _read_data_bytes_1_T_1 = tail(_read_data_bytes_1_T, 1) @[SRAM.scala 26:45]
    read mport read_data_bytes_1_MPORT = mem[_read_data_bytes_1_T_1], clock @[SRAM.scala 26:33]
    read_data_bytes[1] <= read_data_bytes_1_MPORT @[SRAM.scala 26:22]
    node _read_data_bytes_2_T = add(io.address, UInt<2>("h2")) @[SRAM.scala 27:45]
    node _read_data_bytes_2_T_1 = tail(_read_data_bytes_2_T, 1) @[SRAM.scala 27:45]
    read mport read_data_bytes_2_MPORT = mem[_read_data_bytes_2_T_1], clock @[SRAM.scala 27:33]
    read_data_bytes[2] <= read_data_bytes_2_MPORT @[SRAM.scala 27:22]
    node _read_data_bytes_3_T = add(io.address, UInt<2>("h3")) @[SRAM.scala 28:45]
    node _read_data_bytes_3_T_1 = tail(_read_data_bytes_3_T, 1) @[SRAM.scala 28:45]
    read mport read_data_bytes_3_MPORT = mem[_read_data_bytes_3_T_1], clock @[SRAM.scala 28:33]
    read_data_bytes[3] <= read_data_bytes_3_MPORT @[SRAM.scala 28:22]
    node io_read_data_lo = cat(read_data_bytes[1], read_data_bytes[0]) @[Cat.scala 31:58]
    node io_read_data_hi = cat(read_data_bytes[3], read_data_bytes[2]) @[Cat.scala 31:58]
    node _io_read_data_T = cat(io_read_data_hi, io_read_data_lo) @[Cat.scala 31:58]
    io.read_data <= _io_read_data_T @[SRAM.scala 30:16]

  module Reg_D :
    input clock : Clock
    input reset : Reset
    output io : { flip stall : UInt<1>, flip jb : UInt<1>, flip pc : UInt<32>, flip inst : UInt<32>, out_Reg_D_pc : UInt<32>, out_Reg_D_inst : UInt<32>}

    reg PC_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_D.scala 15:35]
    reg INST_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_D.scala 16:35]
    when io.jb : @[Reg_D.scala 18:14]
      PC_REG <= UInt<32>("h0") @[Reg_D.scala 19:17]
      INST_REG <= UInt<32>("h0") @[Reg_D.scala 20:17]
    else :
      when io.stall : @[Reg_D.scala 21:23]
        PC_REG <= PC_REG @[Reg_D.scala 22:17]
        INST_REG <= INST_REG @[Reg_D.scala 23:17]
      else :
        PC_REG <= io.pc @[Reg_D.scala 25:17]
        INST_REG <= io.inst @[Reg_D.scala 26:17]
    io.out_Reg_D_pc <= PC_REG @[Reg_D.scala 28:25]
    io.out_Reg_D_inst <= INST_REG @[Reg_D.scala 29:25]

  module Decoder :
    input clock : Clock
    input reset : Reset
    output io : { flip inst : UInt<32>, dc_out_opcode : UInt<5>, dc_out_func3 : UInt<3>, dc_out_func7 : UInt<1>, dc_out_rs1_index : UInt<5>, dc_out_rs2_index : UInt<5>, dc_out_rd_index : UInt<5>}

    node _io_dc_out_opcode_T = bits(io.inst, 6, 2) @[Decoder.scala 15:30]
    io.dc_out_opcode <= _io_dc_out_opcode_T @[Decoder.scala 15:20]
    node _io_dc_out_func3_T = bits(io.inst, 14, 12) @[Decoder.scala 16:29]
    io.dc_out_func3 <= _io_dc_out_func3_T @[Decoder.scala 16:19]
    node _io_dc_out_func7_T = bits(io.inst, 30, 30) @[Decoder.scala 17:29]
    io.dc_out_func7 <= _io_dc_out_func7_T @[Decoder.scala 17:19]
    node _io_dc_out_rs1_index_T = bits(io.inst, 19, 15) @[Decoder.scala 18:33]
    io.dc_out_rs1_index <= _io_dc_out_rs1_index_T @[Decoder.scala 18:23]
    node _io_dc_out_rs2_index_T = bits(io.inst, 24, 20) @[Decoder.scala 19:33]
    io.dc_out_rs2_index <= _io_dc_out_rs2_index_T @[Decoder.scala 19:23]
    node _io_dc_out_rd_index_T = bits(io.inst, 11, 7) @[Decoder.scala 20:32]
    io.dc_out_rd_index <= _io_dc_out_rd_index_T @[Decoder.scala 20:22]

  module Imm_Ext :
    input clock : Clock
    input reset : Reset
    output io : { flip inst : UInt<32>, imm_ext_out : UInt<32>}

    io.imm_ext_out <= UInt<32>("h0") @[Imm_Ext.scala 12:24]
    node _T = bits(io.inst, 6, 2) @[Imm_Ext.scala 15:19]
    node _T_1 = eq(UInt<5>("h0"), _T) @[Imm_Ext.scala 15:26]
    when _T_1 : @[Imm_Ext.scala 15:26]
      node _io_imm_ext_out_T = bits(io.inst, 31, 31) @[Imm_Ext.scala 17:56]
      node _io_imm_ext_out_T_1 = bits(_io_imm_ext_out_T, 0, 0) @[Bitwise.scala 74:15]
      node _io_imm_ext_out_T_2 = mux(_io_imm_ext_out_T_1, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 74:12]
      node _io_imm_ext_out_T_3 = bits(io.inst, 31, 20) @[Imm_Ext.scala 17:70]
      node _io_imm_ext_out_T_4 = cat(_io_imm_ext_out_T_2, _io_imm_ext_out_T_3) @[Cat.scala 31:58]
      io.imm_ext_out <= _io_imm_ext_out_T_4 @[Imm_Ext.scala 17:33]
    else :
      node _T_2 = eq(UInt<5>("h4"), _T) @[Imm_Ext.scala 15:26]
      when _T_2 : @[Imm_Ext.scala 15:26]
        node _io_imm_ext_out_T_5 = bits(io.inst, 31, 31) @[Imm_Ext.scala 20:56]
        node _io_imm_ext_out_T_6 = bits(_io_imm_ext_out_T_5, 0, 0) @[Bitwise.scala 74:15]
        node _io_imm_ext_out_T_7 = mux(_io_imm_ext_out_T_6, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 74:12]
        node _io_imm_ext_out_T_8 = bits(io.inst, 31, 20) @[Imm_Ext.scala 20:70]
        node _io_imm_ext_out_T_9 = cat(_io_imm_ext_out_T_7, _io_imm_ext_out_T_8) @[Cat.scala 31:58]
        io.imm_ext_out <= _io_imm_ext_out_T_9 @[Imm_Ext.scala 20:33]
      else :
        node _T_3 = eq(UInt<5>("h19"), _T) @[Imm_Ext.scala 15:26]
        when _T_3 : @[Imm_Ext.scala 15:26]
          node _io_imm_ext_out_T_10 = bits(io.inst, 31, 31) @[Imm_Ext.scala 23:56]
          node _io_imm_ext_out_T_11 = bits(_io_imm_ext_out_T_10, 0, 0) @[Bitwise.scala 74:15]
          node _io_imm_ext_out_T_12 = mux(_io_imm_ext_out_T_11, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 74:12]
          node _io_imm_ext_out_T_13 = bits(io.inst, 31, 20) @[Imm_Ext.scala 23:70]
          node _io_imm_ext_out_T_14 = cat(_io_imm_ext_out_T_12, _io_imm_ext_out_T_13) @[Cat.scala 31:58]
          io.imm_ext_out <= _io_imm_ext_out_T_14 @[Imm_Ext.scala 23:33]
        else :
          node _T_4 = eq(UInt<5>("h8"), _T) @[Imm_Ext.scala 15:26]
          when _T_4 : @[Imm_Ext.scala 15:26]
            node _io_imm_ext_out_T_15 = bits(io.inst, 31, 31) @[Imm_Ext.scala 26:56]
            node _io_imm_ext_out_T_16 = bits(_io_imm_ext_out_T_15, 0, 0) @[Bitwise.scala 74:15]
            node _io_imm_ext_out_T_17 = mux(_io_imm_ext_out_T_16, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 74:12]
            node _io_imm_ext_out_T_18 = bits(io.inst, 31, 25) @[Imm_Ext.scala 26:70]
            node _io_imm_ext_out_T_19 = bits(io.inst, 11, 7) @[Imm_Ext.scala 26:87]
            node io_imm_ext_out_hi = cat(_io_imm_ext_out_T_17, _io_imm_ext_out_T_18) @[Cat.scala 31:58]
            node _io_imm_ext_out_T_20 = cat(io_imm_ext_out_hi, _io_imm_ext_out_T_19) @[Cat.scala 31:58]
            io.imm_ext_out <= _io_imm_ext_out_T_20 @[Imm_Ext.scala 26:33]
          else :
            node _T_5 = eq(UInt<5>("h18"), _T) @[Imm_Ext.scala 15:26]
            when _T_5 : @[Imm_Ext.scala 15:26]
              node _io_imm_ext_out_T_21 = bits(io.inst, 31, 31) @[Imm_Ext.scala 29:56]
              node _io_imm_ext_out_T_22 = bits(_io_imm_ext_out_T_21, 0, 0) @[Bitwise.scala 74:15]
              node _io_imm_ext_out_T_23 = mux(_io_imm_ext_out_T_22, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 74:12]
              node _io_imm_ext_out_T_24 = bits(io.inst, 7, 7) @[Imm_Ext.scala 29:70]
              node _io_imm_ext_out_T_25 = bits(io.inst, 30, 25) @[Imm_Ext.scala 29:82]
              node _io_imm_ext_out_T_26 = bits(io.inst, 11, 8) @[Imm_Ext.scala 29:99]
              node io_imm_ext_out_lo = cat(_io_imm_ext_out_T_26, UInt<1>("h0")) @[Cat.scala 31:58]
              node io_imm_ext_out_hi_hi = cat(_io_imm_ext_out_T_23, _io_imm_ext_out_T_24) @[Cat.scala 31:58]
              node io_imm_ext_out_hi_1 = cat(io_imm_ext_out_hi_hi, _io_imm_ext_out_T_25) @[Cat.scala 31:58]
              node _io_imm_ext_out_T_27 = cat(io_imm_ext_out_hi_1, io_imm_ext_out_lo) @[Cat.scala 31:58]
              io.imm_ext_out <= _io_imm_ext_out_T_27 @[Imm_Ext.scala 29:33]
            else :
              node _T_6 = eq(UInt<5>("hd"), _T) @[Imm_Ext.scala 15:26]
              when _T_6 : @[Imm_Ext.scala 15:26]
                node _io_imm_ext_out_T_28 = bits(io.inst, 31, 12) @[Imm_Ext.scala 32:47]
                node _io_imm_ext_out_T_29 = cat(_io_imm_ext_out_T_28, UInt<12>("h0")) @[Cat.scala 31:58]
                io.imm_ext_out <= _io_imm_ext_out_T_29 @[Imm_Ext.scala 32:33]
              else :
                node _T_7 = eq(UInt<5>("h5"), _T) @[Imm_Ext.scala 15:26]
                when _T_7 : @[Imm_Ext.scala 15:26]
                  node _io_imm_ext_out_T_30 = bits(io.inst, 31, 12) @[Imm_Ext.scala 35:47]
                  node _io_imm_ext_out_T_31 = cat(_io_imm_ext_out_T_30, UInt<12>("h0")) @[Cat.scala 31:58]
                  io.imm_ext_out <= _io_imm_ext_out_T_31 @[Imm_Ext.scala 35:33]
                else :
                  node _T_8 = eq(UInt<5>("h1b"), _T) @[Imm_Ext.scala 15:26]
                  when _T_8 : @[Imm_Ext.scala 15:26]
                    node _io_imm_ext_out_T_32 = bits(io.inst, 31, 31) @[Imm_Ext.scala 38:56]
                    node _io_imm_ext_out_T_33 = bits(_io_imm_ext_out_T_32, 0, 0) @[Bitwise.scala 74:15]
                    node _io_imm_ext_out_T_34 = mux(_io_imm_ext_out_T_33, UInt<12>("hfff"), UInt<12>("h0")) @[Bitwise.scala 74:12]
                    node _io_imm_ext_out_T_35 = bits(io.inst, 19, 12) @[Imm_Ext.scala 38:70]
                    node _io_imm_ext_out_T_36 = bits(io.inst, 20, 20) @[Imm_Ext.scala 38:87]
                    node _io_imm_ext_out_T_37 = bits(io.inst, 30, 21) @[Imm_Ext.scala 38:100]
                    node io_imm_ext_out_lo_1 = cat(_io_imm_ext_out_T_37, UInt<1>("h0")) @[Cat.scala 31:58]
                    node io_imm_ext_out_hi_hi_1 = cat(_io_imm_ext_out_T_34, _io_imm_ext_out_T_35) @[Cat.scala 31:58]
                    node io_imm_ext_out_hi_2 = cat(io_imm_ext_out_hi_hi_1, _io_imm_ext_out_T_36) @[Cat.scala 31:58]
                    node _io_imm_ext_out_T_38 = cat(io_imm_ext_out_hi_2, io_imm_ext_out_lo_1) @[Cat.scala 31:58]
                    io.imm_ext_out <= _io_imm_ext_out_T_38 @[Imm_Ext.scala 38:33]

  module RegFile :
    input clock : Clock
    input reset : Reset
    output io : { flip wb_en : UInt<1>, flip wb_data : UInt<32>, flip rd_index : UInt<5>, flip rs1_index : UInt<5>, flip rs2_index : UInt<5>, rs1_data_out : UInt<32>, rs2_data_out : UInt<32>}

    wire _registers_WIRE : UInt<32>[32] @[RegFile.scala 16:34]
    _registers_WIRE[0] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[1] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[2] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[3] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[4] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[5] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[6] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[7] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[8] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[9] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[10] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[11] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[12] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[13] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[14] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[15] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[16] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[17] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[18] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[19] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[20] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[21] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[22] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[23] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[24] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[25] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[26] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[27] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[28] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[29] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[30] <= UInt<32>("h0") @[RegFile.scala 16:34]
    _registers_WIRE[31] <= UInt<32>("h0") @[RegFile.scala 16:34]
    reg registers : UInt<32>[32], clock with :
      reset => (reset, _registers_WIRE) @[RegFile.scala 16:26]
    node _T = neq(io.rd_index, UInt<1>("h0")) @[RegFile.scala 18:32]
    node _T_1 = and(io.wb_en, _T) @[RegFile.scala 18:17]
    when _T_1 : @[RegFile.scala 18:41]
      registers[io.rd_index] <= io.wb_data @[RegFile.scala 19:28]
    node _io_rs1_data_out_T = eq(io.rs1_index, UInt<1>("h0")) @[RegFile.scala 22:39]
    node _io_rs1_data_out_T_1 = mux(_io_rs1_data_out_T, UInt<1>("h0"), registers[io.rs1_index]) @[RegFile.scala 22:25]
    io.rs1_data_out <= _io_rs1_data_out_T_1 @[RegFile.scala 22:19]
    node _io_rs2_data_out_T = eq(io.rs2_index, UInt<1>("h0")) @[RegFile.scala 23:39]
    node _io_rs2_data_out_T_1 = mux(_io_rs2_data_out_T, UInt<1>("h0"), registers[io.rs2_index]) @[RegFile.scala 23:25]
    io.rs2_data_out <= _io_rs2_data_out_T_1 @[RegFile.scala 23:19]

  module Reg_E :
    input clock : Clock
    input reset : Reset
    output io : { flip stall : UInt<1>, flip jb : UInt<1>, flip pc : UInt<32>, flip rs1_data : UInt<32>, flip rs2_data : UInt<32>, flip sext_imme : UInt<32>, out_Reg_E_pc : UInt<32>, out_Reg_E_rs1_data : UInt<32>, out_Reg_E_rs2_data : UInt<32>, out_Reg_E_sext_imme : UInt<32>}

    reg E_PC_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_E.scala 19:43]
    reg E_RS1_DATA_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_E.scala 20:43]
    reg E_RS2_DATA_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_E.scala 21:43]
    reg E_SEXT_IMME_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_E.scala 22:43]
    node _T = or(io.jb, io.stall) @[Reg_E.scala 24:14]
    when _T : @[Reg_E.scala 24:26]
      E_PC_REG <= UInt<32>("h0") @[Reg_E.scala 25:23]
      E_RS1_DATA_REG <= UInt<32>("h0") @[Reg_E.scala 26:23]
      E_RS2_DATA_REG <= UInt<32>("h0") @[Reg_E.scala 27:23]
      E_SEXT_IMME_REG <= UInt<32>("h0") @[Reg_E.scala 28:23]
    else :
      E_PC_REG <= io.pc @[Reg_E.scala 30:23]
      E_RS1_DATA_REG <= io.rs1_data @[Reg_E.scala 31:23]
      E_RS2_DATA_REG <= io.rs2_data @[Reg_E.scala 32:23]
      E_SEXT_IMME_REG <= io.sext_imme @[Reg_E.scala 33:23]
    io.out_Reg_E_pc <= E_PC_REG @[Reg_E.scala 36:28]
    io.out_Reg_E_rs1_data <= E_RS1_DATA_REG @[Reg_E.scala 37:28]
    io.out_Reg_E_rs2_data <= E_RS2_DATA_REG @[Reg_E.scala 38:28]
    io.out_Reg_E_sext_imme <= E_SEXT_IMME_REG @[Reg_E.scala 39:28]

  module ALU :
    input clock : Clock
    input reset : Reset
    output io : { flip opcode : UInt<5>, flip func3 : UInt<3>, flip func7 : UInt<1>, flip operand1 : UInt<32>, flip operand2 : UInt<32>, alu_out : UInt<32>}

    node func7_and_func3 = cat(io.func7, io.func3) @[Cat.scala 31:58]
    io.alu_out <= UInt<32>("h0") @[ALU.scala 16:16]
    node _T = eq(io.opcode, UInt<5>("hc")) @[ALU.scala 17:20]
    when _T : @[ALU.scala 17:55]
      node _T_1 = eq(UInt<4>("h0"), func7_and_func3) @[ALU.scala 18:33]
      when _T_1 : @[ALU.scala 18:33]
        node _io_alu_out_T = asSInt(io.operand1) @[ALU.scala 20:44]
        node _io_alu_out_T_1 = asSInt(io.operand2) @[ALU.scala 20:65]
        node _io_alu_out_T_2 = add(_io_alu_out_T, _io_alu_out_T_1) @[ALU.scala 20:51]
        node _io_alu_out_T_3 = tail(_io_alu_out_T_2, 1) @[ALU.scala 20:51]
        node _io_alu_out_T_4 = asSInt(_io_alu_out_T_3) @[ALU.scala 20:51]
        node _io_alu_out_T_5 = asUInt(_io_alu_out_T_4) @[ALU.scala 20:73]
        io.alu_out <= _io_alu_out_T_5 @[ALU.scala 20:28]
      else :
        node _T_2 = eq(UInt<4>("h8"), func7_and_func3) @[ALU.scala 18:33]
        when _T_2 : @[ALU.scala 18:33]
          node _io_alu_out_T_6 = asSInt(io.operand1) @[ALU.scala 23:44]
          node _io_alu_out_T_7 = asSInt(io.operand2) @[ALU.scala 23:65]
          node _io_alu_out_T_8 = sub(_io_alu_out_T_6, _io_alu_out_T_7) @[ALU.scala 23:51]
          node _io_alu_out_T_9 = tail(_io_alu_out_T_8, 1) @[ALU.scala 23:51]
          node _io_alu_out_T_10 = asSInt(_io_alu_out_T_9) @[ALU.scala 23:51]
          node _io_alu_out_T_11 = asUInt(_io_alu_out_T_10) @[ALU.scala 23:74]
          io.alu_out <= _io_alu_out_T_11 @[ALU.scala 23:28]
        else :
          node _T_3 = eq(UInt<4>("h1"), func7_and_func3) @[ALU.scala 18:33]
          when _T_3 : @[ALU.scala 18:33]
            node _io_alu_out_T_12 = bits(io.operand2, 4, 0) @[ALU.scala 26:58]
            node _io_alu_out_T_13 = dshl(io.operand1, _io_alu_out_T_12) @[ALU.scala 26:44]
            io.alu_out <= _io_alu_out_T_13 @[ALU.scala 26:28]
          else :
            node _T_4 = eq(UInt<4>("h2"), func7_and_func3) @[ALU.scala 18:33]
            when _T_4 : @[ALU.scala 18:33]
              node _io_alu_out_T_14 = asSInt(io.operand1) @[ALU.scala 29:44]
              node _io_alu_out_T_15 = asSInt(io.operand2) @[ALU.scala 29:65]
              node _io_alu_out_T_16 = lt(_io_alu_out_T_14, _io_alu_out_T_15) @[ALU.scala 29:51]
              io.alu_out <= _io_alu_out_T_16 @[ALU.scala 29:28]
            else :
              node _T_5 = eq(UInt<4>("h3"), func7_and_func3) @[ALU.scala 18:33]
              when _T_5 : @[ALU.scala 18:33]
                node _io_alu_out_T_17 = lt(io.operand1, io.operand2) @[ALU.scala 32:44]
                io.alu_out <= _io_alu_out_T_17 @[ALU.scala 32:28]
              else :
                node _T_6 = eq(UInt<4>("h4"), func7_and_func3) @[ALU.scala 18:33]
                when _T_6 : @[ALU.scala 18:33]
                  node _io_alu_out_T_18 = xor(io.operand1, io.operand2) @[ALU.scala 35:44]
                  io.alu_out <= _io_alu_out_T_18 @[ALU.scala 35:28]
                else :
                  node _T_7 = eq(UInt<4>("h5"), func7_and_func3) @[ALU.scala 18:33]
                  when _T_7 : @[ALU.scala 18:33]
                    node _io_alu_out_T_19 = bits(io.operand2, 4, 0) @[ALU.scala 38:58]
                    node _io_alu_out_T_20 = dshr(io.operand1, _io_alu_out_T_19) @[ALU.scala 38:44]
                    io.alu_out <= _io_alu_out_T_20 @[ALU.scala 38:28]
                  else :
                    node _T_8 = eq(UInt<4>("hd"), func7_and_func3) @[ALU.scala 18:33]
                    when _T_8 : @[ALU.scala 18:33]
                      node _io_alu_out_T_21 = asSInt(io.operand1) @[ALU.scala 41:44]
                      node _io_alu_out_T_22 = bits(io.operand2, 4, 0) @[ALU.scala 41:65]
                      node _io_alu_out_T_23 = dshr(_io_alu_out_T_21, _io_alu_out_T_22) @[ALU.scala 41:51]
                      node _io_alu_out_T_24 = asUInt(_io_alu_out_T_23) @[ALU.scala 41:73]
                      io.alu_out <= _io_alu_out_T_24 @[ALU.scala 41:28]
                    else :
                      node _T_9 = eq(UInt<4>("h6"), func7_and_func3) @[ALU.scala 18:33]
                      when _T_9 : @[ALU.scala 18:33]
                        node _io_alu_out_T_25 = or(io.operand1, io.operand2) @[ALU.scala 44:44]
                        io.alu_out <= _io_alu_out_T_25 @[ALU.scala 44:28]
                      else :
                        node _T_10 = eq(UInt<4>("h7"), func7_and_func3) @[ALU.scala 18:33]
                        when _T_10 : @[ALU.scala 18:33]
                          node _io_alu_out_T_26 = and(io.operand1, io.operand2) @[ALU.scala 47:44]
                          io.alu_out <= _io_alu_out_T_26 @[ALU.scala 47:28]
    else :
      node _T_11 = eq(io.opcode, UInt<5>("h4")) @[ALU.scala 51:27]
      when _T_11 : @[ALU.scala 51:63]
        node _T_12 = eq(UInt<1>("h0"), io.func3) @[ALU.scala 52:26]
        when _T_12 : @[ALU.scala 52:26]
          node _io_alu_out_T_27 = asSInt(io.operand1) @[ALU.scala 54:44]
          node _io_alu_out_T_28 = asSInt(io.operand2) @[ALU.scala 54:65]
          node _io_alu_out_T_29 = add(_io_alu_out_T_27, _io_alu_out_T_28) @[ALU.scala 54:51]
          node _io_alu_out_T_30 = tail(_io_alu_out_T_29, 1) @[ALU.scala 54:51]
          node _io_alu_out_T_31 = asSInt(_io_alu_out_T_30) @[ALU.scala 54:51]
          node _io_alu_out_T_32 = asUInt(_io_alu_out_T_31) @[ALU.scala 54:73]
          io.alu_out <= _io_alu_out_T_32 @[ALU.scala 54:28]
        else :
          node _T_13 = eq(UInt<2>("h2"), io.func3) @[ALU.scala 52:26]
          when _T_13 : @[ALU.scala 52:26]
            node _io_alu_out_T_33 = asSInt(io.operand1) @[ALU.scala 57:44]
            node _io_alu_out_T_34 = asSInt(io.operand2) @[ALU.scala 57:65]
            node _io_alu_out_T_35 = lt(_io_alu_out_T_33, _io_alu_out_T_34) @[ALU.scala 57:51]
            io.alu_out <= _io_alu_out_T_35 @[ALU.scala 57:28]
          else :
            node _T_14 = eq(UInt<2>("h3"), io.func3) @[ALU.scala 52:26]
            when _T_14 : @[ALU.scala 52:26]
              node _io_alu_out_T_36 = lt(io.operand1, io.operand2) @[ALU.scala 60:44]
              io.alu_out <= _io_alu_out_T_36 @[ALU.scala 60:28]
            else :
              node _T_15 = eq(UInt<3>("h4"), io.func3) @[ALU.scala 52:26]
              when _T_15 : @[ALU.scala 52:26]
                node _io_alu_out_T_37 = xor(io.operand1, io.operand2) @[ALU.scala 63:44]
                io.alu_out <= _io_alu_out_T_37 @[ALU.scala 63:28]
              else :
                node _T_16 = eq(UInt<3>("h6"), io.func3) @[ALU.scala 52:26]
                when _T_16 : @[ALU.scala 52:26]
                  node _io_alu_out_T_38 = or(io.operand1, io.operand2) @[ALU.scala 66:44]
                  io.alu_out <= _io_alu_out_T_38 @[ALU.scala 66:28]
                else :
                  node _T_17 = eq(UInt<3>("h7"), io.func3) @[ALU.scala 52:26]
                  when _T_17 : @[ALU.scala 52:26]
                    node _io_alu_out_T_39 = and(io.operand1, io.operand2) @[ALU.scala 69:44]
                    io.alu_out <= _io_alu_out_T_39 @[ALU.scala 69:28]
                  else :
                    node _T_18 = eq(UInt<1>("h1"), io.func3) @[ALU.scala 52:26]
                    when _T_18 : @[ALU.scala 52:26]
                      node _io_alu_out_T_40 = bits(io.operand2, 4, 0) @[ALU.scala 72:58]
                      node _io_alu_out_T_41 = dshl(io.operand1, _io_alu_out_T_40) @[ALU.scala 72:44]
                      io.alu_out <= _io_alu_out_T_41 @[ALU.scala 72:28]
                    else :
                      node _T_19 = eq(UInt<3>("h5"), io.func3) @[ALU.scala 52:26]
                      when _T_19 : @[ALU.scala 52:26]
                        node _T_20 = bits(io.func7, 0, 0) @[ALU.scala 75:31]
                        when _T_20 : @[ALU.scala 75:39]
                          node _io_alu_out_T_42 = asSInt(io.operand1) @[ALU.scala 76:48]
                          node _io_alu_out_T_43 = bits(io.operand2, 4, 0) @[ALU.scala 76:69]
                          node _io_alu_out_T_44 = dshr(_io_alu_out_T_42, _io_alu_out_T_43) @[ALU.scala 76:55]
                          node _io_alu_out_T_45 = asUInt(_io_alu_out_T_44) @[ALU.scala 76:77]
                          io.alu_out <= _io_alu_out_T_45 @[ALU.scala 76:32]
                        else :
                          node _io_alu_out_T_46 = bits(io.operand2, 4, 0) @[ALU.scala 78:62]
                          node _io_alu_out_T_47 = dshr(io.operand1, _io_alu_out_T_46) @[ALU.scala 78:48]
                          io.alu_out <= _io_alu_out_T_47 @[ALU.scala 78:32]
      else :
        node _T_21 = eq(io.opcode, UInt<5>("h18")) @[ALU.scala 83:27]
        when _T_21 : @[ALU.scala 83:62]
          node _T_22 = eq(UInt<1>("h0"), io.func3) @[ALU.scala 84:26]
          when _T_22 : @[ALU.scala 84:26]
            node _io_alu_out_T_48 = eq(io.operand1, io.operand2) @[ALU.scala 86:44]
            io.alu_out <= _io_alu_out_T_48 @[ALU.scala 86:28]
          else :
            node _T_23 = eq(UInt<1>("h1"), io.func3) @[ALU.scala 84:26]
            when _T_23 : @[ALU.scala 84:26]
              node _io_alu_out_T_49 = neq(io.operand1, io.operand2) @[ALU.scala 89:44]
              io.alu_out <= _io_alu_out_T_49 @[ALU.scala 89:28]
            else :
              node _T_24 = eq(UInt<3>("h4"), io.func3) @[ALU.scala 84:26]
              when _T_24 : @[ALU.scala 84:26]
                node _io_alu_out_T_50 = asSInt(io.operand1) @[ALU.scala 92:44]
                node _io_alu_out_T_51 = asSInt(io.operand2) @[ALU.scala 92:65]
                node _io_alu_out_T_52 = lt(_io_alu_out_T_50, _io_alu_out_T_51) @[ALU.scala 92:51]
                io.alu_out <= _io_alu_out_T_52 @[ALU.scala 92:28]
              else :
                node _T_25 = eq(UInt<3>("h5"), io.func3) @[ALU.scala 84:26]
                when _T_25 : @[ALU.scala 84:26]
                  node _io_alu_out_T_53 = asSInt(io.operand1) @[ALU.scala 95:44]
                  node _io_alu_out_T_54 = asSInt(io.operand2) @[ALU.scala 95:66]
                  node _io_alu_out_T_55 = geq(_io_alu_out_T_53, _io_alu_out_T_54) @[ALU.scala 95:51]
                  io.alu_out <= _io_alu_out_T_55 @[ALU.scala 95:28]
                else :
                  node _T_26 = eq(UInt<3>("h6"), io.func3) @[ALU.scala 84:26]
                  when _T_26 : @[ALU.scala 84:26]
                    node _io_alu_out_T_56 = lt(io.operand1, io.operand2) @[ALU.scala 98:44]
                    io.alu_out <= _io_alu_out_T_56 @[ALU.scala 98:28]
                  else :
                    node _T_27 = eq(UInt<3>("h7"), io.func3) @[ALU.scala 84:26]
                    when _T_27 : @[ALU.scala 84:26]
                      node _io_alu_out_T_57 = geq(io.operand1, io.operand2) @[ALU.scala 101:44]
                      io.alu_out <= _io_alu_out_T_57 @[ALU.scala 101:28]
        else :
          node _T_28 = eq(io.opcode, UInt<5>("hd")) @[ALU.scala 107:27]
          when _T_28 : @[ALU.scala 107:64]
            io.alu_out <= io.operand2 @[ALU.scala 108:20]
          else :
            node _T_29 = eq(io.opcode, UInt<5>("h5")) @[ALU.scala 109:27]
            node _T_30 = eq(io.opcode, UInt<5>("h8")) @[ALU.scala 109:78]
            node _T_31 = or(_T_29, _T_30) @[ALU.scala 109:65]
            node _T_32 = eq(io.opcode, UInt<5>("h0")) @[ALU.scala 109:125]
            node _T_33 = or(_T_31, _T_32) @[ALU.scala 109:112]
            when _T_33 : @[ALU.scala 109:161]
              node _io_alu_out_T_58 = add(io.operand1, io.operand2) @[ALU.scala 110:36]
              node _io_alu_out_T_59 = tail(_io_alu_out_T_58, 1) @[ALU.scala 110:36]
              io.alu_out <= _io_alu_out_T_59 @[ALU.scala 110:20]
            else :
              node _T_34 = eq(io.opcode, UInt<5>("h1b")) @[ALU.scala 111:27]
              node _T_35 = eq(io.opcode, UInt<5>("h19")) @[ALU.scala 111:76]
              node _T_36 = or(_T_34, _T_35) @[ALU.scala 111:63]
              when _T_36 : @[ALU.scala 111:114]
                node _io_alu_out_T_60 = add(io.operand1, UInt<3>("h4")) @[ALU.scala 112:36]
                node _io_alu_out_T_61 = tail(_io_alu_out_T_60, 1) @[ALU.scala 112:36]
                io.alu_out <= _io_alu_out_T_61 @[ALU.scala 112:20]
              else :
                io.alu_out <= UInt<1>("h0") @[ALU.scala 114:20]

  module JB_Unit :
    input clock : Clock
    input reset : Reset
    output io : { flip operand1 : UInt<32>, flip operand2 : UInt<32>, jb_out : UInt<32>}

    node _io_jb_out_T = add(io.operand1, io.operand2) @[JB_Unit.scala 12:32]
    node _io_jb_out_T_1 = tail(_io_jb_out_T, 1) @[JB_Unit.scala 12:32]
    node _io_jb_out_T_2 = and(_io_jb_out_T_1, UInt<32>("hffffffff")) @[JB_Unit.scala 12:47]
    io.jb_out <= _io_jb_out_T_2 @[JB_Unit.scala 12:15]

  module Reg_M :
    input clock : Clock
    input reset : Reset
    output io : { flip alu_out : UInt<32>, flip rs2_data : UInt<32>, out_Reg_M_alu_out : UInt<32>, out_Reg_M_rs2_data : UInt<32>}

    reg ALU_OUT_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_M.scala 13:40]
    reg RS2_DATA_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_M.scala 14:40]
    ALU_OUT_REG <= io.alu_out @[Reg_M.scala 16:19]
    RS2_DATA_REG <= io.rs2_data @[Reg_M.scala 17:19]
    io.out_Reg_M_alu_out <= ALU_OUT_REG @[Reg_M.scala 19:31]
    io.out_Reg_M_rs2_data <= RS2_DATA_REG @[Reg_M.scala 20:31]

  module SRAM_dm :
    input clock : Clock
    input reset : Reset
    output io : { flip w_en : UInt<4>, flip address : UInt<16>, flip write_data : UInt<32>, read_data : UInt<32>, flip mem_read_test : UInt<1>, flip mem_addr_test : UInt<32>, mem_data_test : UInt<32>}

    cmem mem : UInt<8> [65536] @[SRAM_dm.scala 17:16]
    node _T = neq(io.w_en, UInt<1>("h0")) @[SRAM_dm.scala 20:16]
    when _T : @[SRAM_dm.scala 20:25]
      node _T_1 = bits(io.w_en, 0, 0) @[SRAM_dm.scala 21:17]
      when _T_1 : @[SRAM_dm.scala 21:22]
        node _T_2 = bits(io.write_data, 7, 0) @[SRAM_dm.scala 21:59]
        write mport MPORT = mem[io.address], clock
        MPORT <= _T_2
      node _T_3 = bits(io.w_en, 1, 1) @[SRAM_dm.scala 22:17]
      when _T_3 : @[SRAM_dm.scala 22:22]
        node _T_4 = add(io.address, UInt<1>("h1")) @[SRAM_dm.scala 22:45]
        node _T_5 = tail(_T_4, 1) @[SRAM_dm.scala 22:45]
        node _T_6 = bits(io.write_data, 15, 8) @[SRAM_dm.scala 22:65]
        write mport MPORT_1 = mem[_T_5], clock
        MPORT_1 <= _T_6
      node _T_7 = bits(io.w_en, 2, 2) @[SRAM_dm.scala 23:17]
      when _T_7 : @[SRAM_dm.scala 23:22]
        node _T_8 = add(io.address, UInt<2>("h2")) @[SRAM_dm.scala 23:45]
        node _T_9 = tail(_T_8, 1) @[SRAM_dm.scala 23:45]
        node _T_10 = bits(io.write_data, 23, 16) @[SRAM_dm.scala 23:65]
        write mport MPORT_2 = mem[_T_9], clock
        MPORT_2 <= _T_10
      node _T_11 = bits(io.w_en, 3, 3) @[SRAM_dm.scala 24:17]
      when _T_11 : @[SRAM_dm.scala 24:22]
        node _T_12 = add(io.address, UInt<2>("h3")) @[SRAM_dm.scala 24:45]
        node _T_13 = tail(_T_12, 1) @[SRAM_dm.scala 24:45]
        node _T_14 = bits(io.write_data, 31, 24) @[SRAM_dm.scala 24:65]
        write mport MPORT_3 = mem[_T_13], clock
        MPORT_3 <= _T_14
    wire read_data_bytes : UInt<8>[4] @[SRAM_dm.scala 28:32]
    read_data_bytes[0] <= UInt<8>("h0") @[SRAM_dm.scala 28:32]
    read_data_bytes[1] <= UInt<8>("h0") @[SRAM_dm.scala 28:32]
    read_data_bytes[2] <= UInt<8>("h0") @[SRAM_dm.scala 28:32]
    read_data_bytes[3] <= UInt<8>("h0") @[SRAM_dm.scala 28:32]
    read mport read_data_bytes_0_MPORT = mem[io.address], clock @[SRAM_dm.scala 29:33]
    read_data_bytes[0] <= read_data_bytes_0_MPORT @[SRAM_dm.scala 29:22]
    node _read_data_bytes_1_T = add(io.address, UInt<1>("h1")) @[SRAM_dm.scala 30:45]
    node _read_data_bytes_1_T_1 = tail(_read_data_bytes_1_T, 1) @[SRAM_dm.scala 30:45]
    read mport read_data_bytes_1_MPORT = mem[_read_data_bytes_1_T_1], clock @[SRAM_dm.scala 30:33]
    read_data_bytes[1] <= read_data_bytes_1_MPORT @[SRAM_dm.scala 30:22]
    node _read_data_bytes_2_T = add(io.address, UInt<2>("h2")) @[SRAM_dm.scala 31:45]
    node _read_data_bytes_2_T_1 = tail(_read_data_bytes_2_T, 1) @[SRAM_dm.scala 31:45]
    read mport read_data_bytes_2_MPORT = mem[_read_data_bytes_2_T_1], clock @[SRAM_dm.scala 31:33]
    read_data_bytes[2] <= read_data_bytes_2_MPORT @[SRAM_dm.scala 31:22]
    node _read_data_bytes_3_T = add(io.address, UInt<2>("h3")) @[SRAM_dm.scala 32:45]
    node _read_data_bytes_3_T_1 = tail(_read_data_bytes_3_T, 1) @[SRAM_dm.scala 32:45]
    read mport read_data_bytes_3_MPORT = mem[_read_data_bytes_3_T_1], clock @[SRAM_dm.scala 32:33]
    read_data_bytes[3] <= read_data_bytes_3_MPORT @[SRAM_dm.scala 32:22]
    node io_read_data_lo = cat(read_data_bytes[1], read_data_bytes[0]) @[Cat.scala 31:58]
    node io_read_data_hi = cat(read_data_bytes[3], read_data_bytes[2]) @[Cat.scala 31:58]
    node _io_read_data_T = cat(io_read_data_hi, io_read_data_lo) @[Cat.scala 31:58]
    io.read_data <= _io_read_data_T @[SRAM_dm.scala 34:16]
    wire test_data_bytes : UInt<8>[4] @[SRAM_dm.scala 37:32]
    test_data_bytes[0] <= UInt<8>("h0") @[SRAM_dm.scala 37:32]
    test_data_bytes[1] <= UInt<8>("h0") @[SRAM_dm.scala 37:32]
    test_data_bytes[2] <= UInt<8>("h0") @[SRAM_dm.scala 37:32]
    test_data_bytes[3] <= UInt<8>("h0") @[SRAM_dm.scala 37:32]
    node _test_data_bytes_0_T = bits(io.mem_addr_test, 15, 0) @[SRAM_dm.scala 38:33]
    read mport test_data_bytes_0_MPORT = mem[_test_data_bytes_0_T], clock @[SRAM_dm.scala 38:33]
    test_data_bytes[0] <= test_data_bytes_0_MPORT @[SRAM_dm.scala 38:22]
    node _test_data_bytes_1_T = add(io.mem_addr_test, UInt<1>("h1")) @[SRAM_dm.scala 39:51]
    node _test_data_bytes_1_T_1 = tail(_test_data_bytes_1_T, 1) @[SRAM_dm.scala 39:51]
    node _test_data_bytes_1_T_2 = bits(_test_data_bytes_1_T_1, 15, 0) @[SRAM_dm.scala 39:33]
    read mport test_data_bytes_1_MPORT = mem[_test_data_bytes_1_T_2], clock @[SRAM_dm.scala 39:33]
    test_data_bytes[1] <= test_data_bytes_1_MPORT @[SRAM_dm.scala 39:22]
    node _test_data_bytes_2_T = add(io.mem_addr_test, UInt<2>("h2")) @[SRAM_dm.scala 40:51]
    node _test_data_bytes_2_T_1 = tail(_test_data_bytes_2_T, 1) @[SRAM_dm.scala 40:51]
    node _test_data_bytes_2_T_2 = bits(_test_data_bytes_2_T_1, 15, 0) @[SRAM_dm.scala 40:33]
    read mport test_data_bytes_2_MPORT = mem[_test_data_bytes_2_T_2], clock @[SRAM_dm.scala 40:33]
    test_data_bytes[2] <= test_data_bytes_2_MPORT @[SRAM_dm.scala 40:22]
    node _test_data_bytes_3_T = add(io.mem_addr_test, UInt<2>("h3")) @[SRAM_dm.scala 41:51]
    node _test_data_bytes_3_T_1 = tail(_test_data_bytes_3_T, 1) @[SRAM_dm.scala 41:51]
    node _test_data_bytes_3_T_2 = bits(_test_data_bytes_3_T_1, 15, 0) @[SRAM_dm.scala 41:33]
    read mport test_data_bytes_3_MPORT = mem[_test_data_bytes_3_T_2], clock @[SRAM_dm.scala 41:33]
    test_data_bytes[3] <= test_data_bytes_3_MPORT @[SRAM_dm.scala 41:22]
    io.mem_data_test <= UInt<1>("h0") @[SRAM_dm.scala 43:20]
    when io.mem_read_test : @[SRAM_dm.scala 44:25]
      node io_mem_data_test_lo = cat(test_data_bytes[1], test_data_bytes[0]) @[Cat.scala 31:58]
      node io_mem_data_test_hi = cat(test_data_bytes[3], test_data_bytes[2]) @[Cat.scala 31:58]
      node _io_mem_data_test_T = cat(io_mem_data_test_hi, io_mem_data_test_lo) @[Cat.scala 31:58]
      io.mem_data_test <= _io_mem_data_test_T @[SRAM_dm.scala 45:22]

  module Reg_W :
    input clock : Clock
    input reset : Reset
    output io : { flip alu_out : UInt<32>, flip ld_data : UInt<32>, out_Reg_W_alu_out : UInt<32>, out_Reg_W_ld_data : UInt<32>}

    reg ALU_OUT_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_W.scala 13:40]
    reg LD_DATA_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_W.scala 14:40]
    ALU_OUT_REG <= io.alu_out @[Reg_W.scala 16:19]
    LD_DATA_REG <= io.ld_data @[Reg_W.scala 17:19]
    io.out_Reg_W_alu_out <= ALU_OUT_REG @[Reg_W.scala 19:31]
    io.out_Reg_W_ld_data <= LD_DATA_REG @[Reg_W.scala 20:31]

  module LD_Filter :
    input clock : Clock
    input reset : Reset
    output io : { flip func3 : UInt<3>, flip ld_data : UInt<32>, ld_data_f : UInt<32>}

    io.ld_data_f <= UInt<32>("h0") @[LD_Filter.scala 13:25]
    node _T = eq(UInt<3>("h0"), io.func3) @[LD_Filter.scala 14:21]
    when _T : @[LD_Filter.scala 14:21]
      node _io_ld_data_f_T = bits(io.ld_data, 7, 7) @[LD_Filter.scala 16:55]
      node _io_ld_data_f_T_1 = bits(_io_ld_data_f_T, 0, 0) @[Bitwise.scala 74:15]
      node _io_ld_data_f_T_2 = mux(_io_ld_data_f_T_1, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 74:12]
      node _io_ld_data_f_T_3 = bits(io.ld_data, 7, 0) @[LD_Filter.scala 16:71]
      node _io_ld_data_f_T_4 = cat(_io_ld_data_f_T_2, _io_ld_data_f_T_3) @[Cat.scala 31:58]
      io.ld_data_f <= _io_ld_data_f_T_4 @[LD_Filter.scala 16:29]
    else :
      node _T_1 = eq(UInt<3>("h1"), io.func3) @[LD_Filter.scala 14:21]
      when _T_1 : @[LD_Filter.scala 14:21]
        node _io_ld_data_f_T_5 = bits(io.ld_data, 15, 15) @[LD_Filter.scala 19:55]
        node _io_ld_data_f_T_6 = bits(_io_ld_data_f_T_5, 0, 0) @[Bitwise.scala 74:15]
        node _io_ld_data_f_T_7 = mux(_io_ld_data_f_T_6, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 74:12]
        node _io_ld_data_f_T_8 = bits(io.ld_data, 15, 0) @[LD_Filter.scala 19:72]
        node _io_ld_data_f_T_9 = cat(_io_ld_data_f_T_7, _io_ld_data_f_T_8) @[Cat.scala 31:58]
        io.ld_data_f <= _io_ld_data_f_T_9 @[LD_Filter.scala 19:29]
      else :
        node _T_2 = eq(UInt<3>("h2"), io.func3) @[LD_Filter.scala 14:21]
        when _T_2 : @[LD_Filter.scala 14:21]
          io.ld_data_f <= io.ld_data @[LD_Filter.scala 22:29]
        else :
          node _T_3 = eq(UInt<3>("h4"), io.func3) @[LD_Filter.scala 14:21]
          when _T_3 : @[LD_Filter.scala 14:21]
            node _io_ld_data_f_T_10 = bits(io.ld_data, 7, 0) @[LD_Filter.scala 25:57]
            node _io_ld_data_f_T_11 = cat(UInt<24>("h0"), _io_ld_data_f_T_10) @[Cat.scala 31:58]
            io.ld_data_f <= _io_ld_data_f_T_11 @[LD_Filter.scala 25:29]
          else :
            node _T_4 = eq(UInt<3>("h5"), io.func3) @[LD_Filter.scala 14:21]
            when _T_4 : @[LD_Filter.scala 14:21]
              node _io_ld_data_f_T_12 = bits(io.ld_data, 15, 0) @[LD_Filter.scala 28:57]
              node _io_ld_data_f_T_13 = cat(UInt<16>("h0"), _io_ld_data_f_T_12) @[Cat.scala 31:58]
              io.ld_data_f <= _io_ld_data_f_T_13 @[LD_Filter.scala 28:29]

  module Controller :
    input clock : Clock
    input reset : Reset
    output io : { flip op : UInt<5>, flip f3 : UInt<3>, flip rd : UInt<5>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip f7 : UInt<1>, flip alu_out : UInt<1>, stall : UInt<1>, next_pc_sel : UInt<1>, F_im_w_en : UInt<4>, D_rs1_data_sel : UInt<1>, D_rs2_data_sel : UInt<1>, E_rs1_data_sel : UInt<2>, E_rs2_data_sel : UInt<2>, E_jb_op1_sel : UInt<1>, E_alu_op1_sel : UInt<1>, E_alu_op2_sel : UInt<1>, E_op : UInt<5>, E_f3 : UInt<3>, E_f7 : UInt<1>, M_dm_w_en : UInt<4>, W_wb_en : UInt<1>, W_rd_index : UInt<5>, W_f3 : UInt<3>, W_wb_data_sel : UInt<1>}

    reg IN_E_OP_REG : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Controller.scala 47:38]
    reg IN_E_F3_REG : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Controller.scala 48:38]
    reg IN_E_RD_REG : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Controller.scala 49:38]
    reg IN_E_RS1_REG : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Controller.scala 50:38]
    reg IN_E_RS2_REG : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Controller.scala 51:38]
    reg IN_E_F7_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Controller.scala 52:38]
    reg IN_M_OP_REG : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Controller.scala 54:38]
    reg IN_M_F3_REG : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Controller.scala 55:38]
    reg IN_M_RD_REG : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Controller.scala 56:38]
    reg IN_W_OP_REG : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Controller.scala 58:38]
    reg IN_W_F3_REG : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Controller.scala 59:38]
    reg IN_W_RD_REG : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Controller.scala 60:38]
    node _T = or(io.stall, io.next_pc_sel) @[Controller.scala 62:19]
    when _T : @[Controller.scala 62:37]
      IN_E_OP_REG <= UInt<5>("hc") @[Controller.scala 64:25]
      IN_E_F3_REG <= UInt<3>("h0") @[Controller.scala 65:25]
      IN_E_RD_REG <= UInt<5>("h0") @[Controller.scala 66:25]
      IN_E_RS1_REG <= UInt<5>("h0") @[Controller.scala 67:25]
      IN_E_RS2_REG <= UInt<5>("h0") @[Controller.scala 68:25]
      IN_E_F7_REG <= UInt<1>("h0") @[Controller.scala 69:25]
      IN_M_OP_REG <= IN_E_OP_REG @[Controller.scala 72:25]
      IN_M_F3_REG <= IN_E_F3_REG @[Controller.scala 73:25]
      IN_M_RD_REG <= IN_E_RD_REG @[Controller.scala 74:25]
      IN_W_OP_REG <= IN_M_OP_REG @[Controller.scala 77:25]
      IN_W_F3_REG <= IN_M_F3_REG @[Controller.scala 78:25]
      IN_W_RD_REG <= IN_M_RD_REG @[Controller.scala 79:25]
    else :
      IN_E_OP_REG <= io.op @[Controller.scala 82:25]
      IN_E_F3_REG <= io.f3 @[Controller.scala 83:25]
      IN_E_RD_REG <= io.rd @[Controller.scala 84:25]
      IN_E_RS1_REG <= io.rs1 @[Controller.scala 85:25]
      IN_E_RS2_REG <= io.rs2 @[Controller.scala 86:25]
      IN_E_F7_REG <= io.f7 @[Controller.scala 87:25]
      IN_M_OP_REG <= IN_E_OP_REG @[Controller.scala 90:25]
      IN_M_F3_REG <= IN_E_F3_REG @[Controller.scala 91:25]
      IN_M_RD_REG <= IN_E_RD_REG @[Controller.scala 92:25]
      IN_W_OP_REG <= IN_M_OP_REG @[Controller.scala 95:25]
      IN_W_F3_REG <= IN_M_F3_REG @[Controller.scala 96:25]
      IN_W_RD_REG <= IN_M_RD_REG @[Controller.scala 97:25]
    wire is_D_use_rs1 : UInt<1> @[Controller.scala 102:28]
    wire is_D_use_rs2 : UInt<1> @[Controller.scala 103:28]
    wire is_W_use_rd : UInt<1> @[Controller.scala 104:27]
    wire is_D_rs1_W_rd_overlap : UInt<1> @[Controller.scala 105:37]
    wire is_D_rs2_W_rd_overlap : UInt<1> @[Controller.scala 106:37]
    wire is_E_use_rs1 : UInt<1> @[Controller.scala 108:28]
    wire is_E_use_rs2 : UInt<1> @[Controller.scala 109:28]
    wire is_M_use_rd : UInt<1> @[Controller.scala 110:27]
    wire is_E_rs1_W_rd_overlap : UInt<1> @[Controller.scala 111:37]
    wire is_E_rs1_M_rd_overlap : UInt<1> @[Controller.scala 112:37]
    wire is_E_rs2_W_rd_overlap : UInt<1> @[Controller.scala 113:37]
    wire is_E_rs2_M_rd_overlap : UInt<1> @[Controller.scala 114:37]
    wire is_DE_overlap : UInt<1> @[Controller.scala 116:29]
    wire is_D_rs1_E_rd_overlap : UInt<1> @[Controller.scala 117:37]
    wire is_D_rs2_E_rd_overlap : UInt<1> @[Controller.scala 118:37]
    node _T_1 = eq(io.op, UInt<5>("hd")) @[Controller.scala 122:15]
    node _T_2 = eq(io.op, UInt<5>("h5")) @[Controller.scala 123:15]
    node _T_3 = or(_T_1, _T_2) @[Controller.scala 122:51]
    node _T_4 = eq(io.op, UInt<5>("h1b")) @[Controller.scala 124:15]
    node _T_5 = or(_T_3, _T_4) @[Controller.scala 123:53]
    when _T_5 : @[Controller.scala 125:6]
      is_D_use_rs1 <= UInt<1>("h0") @[Controller.scala 126:22]
    else :
      is_D_use_rs1 <= UInt<1>("h1") @[Controller.scala 128:22]
    node _T_6 = eq(io.op, UInt<5>("hc")) @[Controller.scala 133:15]
    node _T_7 = eq(io.op, UInt<5>("h8")) @[Controller.scala 134:15]
    node _T_8 = or(_T_6, _T_7) @[Controller.scala 133:49]
    node _T_9 = eq(io.op, UInt<5>("h18")) @[Controller.scala 135:15]
    node _T_10 = or(_T_8, _T_9) @[Controller.scala 134:49]
    when _T_10 : @[Controller.scala 136:6]
      is_D_use_rs2 <= UInt<1>("h1") @[Controller.scala 137:22]
    else :
      is_D_use_rs2 <= UInt<1>("h0") @[Controller.scala 139:22]
    node _T_11 = eq(IN_E_OP_REG, UInt<5>("hd")) @[Controller.scala 144:21]
    node _T_12 = eq(IN_E_OP_REG, UInt<5>("h5")) @[Controller.scala 145:21]
    node _T_13 = or(_T_11, _T_12) @[Controller.scala 144:57]
    node _T_14 = eq(IN_E_OP_REG, UInt<5>("h1b")) @[Controller.scala 146:21]
    node _T_15 = or(_T_13, _T_14) @[Controller.scala 145:59]
    when _T_15 : @[Controller.scala 147:6]
      is_E_use_rs1 <= UInt<1>("h0") @[Controller.scala 148:22]
    else :
      is_E_use_rs1 <= UInt<1>("h1") @[Controller.scala 150:22]
    node _T_16 = eq(IN_E_OP_REG, UInt<5>("hc")) @[Controller.scala 155:21]
    node _T_17 = eq(IN_E_OP_REG, UInt<5>("h8")) @[Controller.scala 156:21]
    node _T_18 = or(_T_16, _T_17) @[Controller.scala 155:55]
    node _T_19 = eq(IN_E_OP_REG, UInt<5>("h18")) @[Controller.scala 157:21]
    node _T_20 = or(_T_18, _T_19) @[Controller.scala 156:55]
    when _T_20 : @[Controller.scala 158:6]
      is_E_use_rs2 <= UInt<1>("h1") @[Controller.scala 159:22]
    else :
      is_E_use_rs2 <= UInt<1>("h0") @[Controller.scala 161:22]
    node _T_21 = eq(IN_M_OP_REG, UInt<5>("h18")) @[Controller.scala 166:21]
    node _T_22 = eq(IN_M_OP_REG, UInt<5>("h8")) @[Controller.scala 167:21]
    node _T_23 = or(_T_21, _T_22) @[Controller.scala 166:55]
    when _T_23 : @[Controller.scala 168:7]
      is_M_use_rd <= UInt<1>("h0") @[Controller.scala 169:21]
    else :
      is_M_use_rd <= UInt<1>("h1") @[Controller.scala 171:21]
    node _T_24 = eq(IN_W_OP_REG, UInt<5>("h18")) @[Controller.scala 176:21]
    node _T_25 = eq(IN_W_OP_REG, UInt<5>("h8")) @[Controller.scala 177:21]
    node _T_26 = or(_T_24, _T_25) @[Controller.scala 176:55]
    when _T_26 : @[Controller.scala 178:7]
      is_W_use_rd <= UInt<1>("h0") @[Controller.scala 179:21]
    else :
      is_W_use_rd <= UInt<1>("h1") @[Controller.scala 181:21]
    node _is_D_rs1_W_rd_overlap_T = and(is_D_use_rs1, is_W_use_rd) @[Controller.scala 185:43]
    node _is_D_rs1_W_rd_overlap_T_1 = eq(io.rs1, IN_W_RD_REG) @[Controller.scala 185:69]
    node _is_D_rs1_W_rd_overlap_T_2 = and(_is_D_rs1_W_rd_overlap_T, _is_D_rs1_W_rd_overlap_T_1) @[Controller.scala 185:58]
    node _is_D_rs1_W_rd_overlap_T_3 = neq(IN_W_RD_REG, UInt<1>("h0")) @[Controller.scala 185:102]
    node _is_D_rs1_W_rd_overlap_T_4 = and(_is_D_rs1_W_rd_overlap_T_2, _is_D_rs1_W_rd_overlap_T_3) @[Controller.scala 185:86]
    is_D_rs1_W_rd_overlap <= _is_D_rs1_W_rd_overlap_T_4 @[Controller.scala 185:27]
    node _is_D_rs2_W_rd_overlap_T = and(is_D_use_rs2, is_W_use_rd) @[Controller.scala 186:43]
    node _is_D_rs2_W_rd_overlap_T_1 = eq(io.rs2, IN_W_RD_REG) @[Controller.scala 186:69]
    node _is_D_rs2_W_rd_overlap_T_2 = and(_is_D_rs2_W_rd_overlap_T, _is_D_rs2_W_rd_overlap_T_1) @[Controller.scala 186:58]
    node _is_D_rs2_W_rd_overlap_T_3 = neq(IN_W_RD_REG, UInt<1>("h0")) @[Controller.scala 186:102]
    node _is_D_rs2_W_rd_overlap_T_4 = and(_is_D_rs2_W_rd_overlap_T_2, _is_D_rs2_W_rd_overlap_T_3) @[Controller.scala 186:86]
    is_D_rs2_W_rd_overlap <= _is_D_rs2_W_rd_overlap_T_4 @[Controller.scala 186:27]
    node _io_D_rs1_data_sel_T = mux(is_D_rs1_W_rd_overlap, UInt<1>("h1"), UInt<1>("h0")) @[Controller.scala 187:29]
    io.D_rs1_data_sel <= _io_D_rs1_data_sel_T @[Controller.scala 187:23]
    node _io_D_rs2_data_sel_T = mux(is_D_rs2_W_rd_overlap, UInt<1>("h1"), UInt<1>("h0")) @[Controller.scala 188:29]
    io.D_rs2_data_sel <= _io_D_rs2_data_sel_T @[Controller.scala 188:23]
    node _is_E_rs1_W_rd_overlap_T = and(is_E_use_rs1, is_W_use_rd) @[Controller.scala 191:43]
    node _is_E_rs1_W_rd_overlap_T_1 = eq(IN_E_RS1_REG, IN_W_RD_REG) @[Controller.scala 191:75]
    node _is_E_rs1_W_rd_overlap_T_2 = and(_is_E_rs1_W_rd_overlap_T, _is_E_rs1_W_rd_overlap_T_1) @[Controller.scala 191:58]
    node _is_E_rs1_W_rd_overlap_T_3 = neq(IN_W_RD_REG, UInt<1>("h0")) @[Controller.scala 191:108]
    node _is_E_rs1_W_rd_overlap_T_4 = and(_is_E_rs1_W_rd_overlap_T_2, _is_E_rs1_W_rd_overlap_T_3) @[Controller.scala 191:92]
    is_E_rs1_W_rd_overlap <= _is_E_rs1_W_rd_overlap_T_4 @[Controller.scala 191:27]
    node _is_E_rs1_M_rd_overlap_T = and(is_E_use_rs1, is_M_use_rd) @[Controller.scala 192:43]
    node _is_E_rs1_M_rd_overlap_T_1 = eq(IN_E_RS1_REG, IN_M_RD_REG) @[Controller.scala 192:75]
    node _is_E_rs1_M_rd_overlap_T_2 = and(_is_E_rs1_M_rd_overlap_T, _is_E_rs1_M_rd_overlap_T_1) @[Controller.scala 192:58]
    node _is_E_rs1_M_rd_overlap_T_3 = neq(IN_M_RD_REG, UInt<1>("h0")) @[Controller.scala 192:108]
    node _is_E_rs1_M_rd_overlap_T_4 = and(_is_E_rs1_M_rd_overlap_T_2, _is_E_rs1_M_rd_overlap_T_3) @[Controller.scala 192:92]
    is_E_rs1_M_rd_overlap <= _is_E_rs1_M_rd_overlap_T_4 @[Controller.scala 192:27]
    node _io_E_rs1_data_sel_T = mux(is_E_rs1_W_rd_overlap, UInt<2>("h0"), UInt<2>("h2")) @[Controller.scala 193:67]
    node _io_E_rs1_data_sel_T_1 = mux(is_E_rs1_M_rd_overlap, UInt<2>("h1"), _io_E_rs1_data_sel_T) @[Controller.scala 193:30]
    io.E_rs1_data_sel <= _io_E_rs1_data_sel_T_1 @[Controller.scala 193:24]
    node _is_E_rs2_W_rd_overlap_T = and(is_E_use_rs2, is_W_use_rd) @[Controller.scala 194:43]
    node _is_E_rs2_W_rd_overlap_T_1 = eq(IN_E_RS2_REG, IN_W_RD_REG) @[Controller.scala 194:75]
    node _is_E_rs2_W_rd_overlap_T_2 = and(_is_E_rs2_W_rd_overlap_T, _is_E_rs2_W_rd_overlap_T_1) @[Controller.scala 194:58]
    node _is_E_rs2_W_rd_overlap_T_3 = neq(IN_W_RD_REG, UInt<1>("h0")) @[Controller.scala 194:108]
    node _is_E_rs2_W_rd_overlap_T_4 = and(_is_E_rs2_W_rd_overlap_T_2, _is_E_rs2_W_rd_overlap_T_3) @[Controller.scala 194:92]
    is_E_rs2_W_rd_overlap <= _is_E_rs2_W_rd_overlap_T_4 @[Controller.scala 194:27]
    node _is_E_rs2_M_rd_overlap_T = and(is_E_use_rs2, is_M_use_rd) @[Controller.scala 195:43]
    node _is_E_rs2_M_rd_overlap_T_1 = eq(IN_E_RS2_REG, IN_M_RD_REG) @[Controller.scala 195:75]
    node _is_E_rs2_M_rd_overlap_T_2 = and(_is_E_rs2_M_rd_overlap_T, _is_E_rs2_M_rd_overlap_T_1) @[Controller.scala 195:58]
    node _is_E_rs2_M_rd_overlap_T_3 = neq(IN_M_RD_REG, UInt<1>("h0")) @[Controller.scala 195:108]
    node _is_E_rs2_M_rd_overlap_T_4 = and(_is_E_rs2_M_rd_overlap_T_2, _is_E_rs2_M_rd_overlap_T_3) @[Controller.scala 195:92]
    is_E_rs2_M_rd_overlap <= _is_E_rs2_M_rd_overlap_T_4 @[Controller.scala 195:27]
    node _io_E_rs2_data_sel_T = mux(is_E_rs2_W_rd_overlap, UInt<2>("h0"), UInt<2>("h2")) @[Controller.scala 196:67]
    node _io_E_rs2_data_sel_T_1 = mux(is_E_rs2_M_rd_overlap, UInt<2>("h1"), _io_E_rs2_data_sel_T) @[Controller.scala 196:30]
    io.E_rs2_data_sel <= _io_E_rs2_data_sel_T_1 @[Controller.scala 196:24]
    node _is_D_rs1_E_rd_overlap_T = eq(io.rs1, IN_E_RD_REG) @[Controller.scala 199:54]
    node _is_D_rs1_E_rd_overlap_T_1 = and(is_D_use_rs1, _is_D_rs1_E_rd_overlap_T) @[Controller.scala 199:43]
    node _is_D_rs1_E_rd_overlap_T_2 = neq(IN_E_RD_REG, UInt<1>("h0")) @[Controller.scala 199:87]
    node _is_D_rs1_E_rd_overlap_T_3 = and(_is_D_rs1_E_rd_overlap_T_1, _is_D_rs1_E_rd_overlap_T_2) @[Controller.scala 199:71]
    is_D_rs1_E_rd_overlap <= _is_D_rs1_E_rd_overlap_T_3 @[Controller.scala 199:27]
    node _is_D_rs2_E_rd_overlap_T = eq(io.rs2, IN_E_RD_REG) @[Controller.scala 200:54]
    node _is_D_rs2_E_rd_overlap_T_1 = and(is_D_use_rs2, _is_D_rs2_E_rd_overlap_T) @[Controller.scala 200:43]
    node _is_D_rs2_E_rd_overlap_T_2 = neq(IN_E_RD_REG, UInt<1>("h0")) @[Controller.scala 200:87]
    node _is_D_rs2_E_rd_overlap_T_3 = and(_is_D_rs2_E_rd_overlap_T_1, _is_D_rs2_E_rd_overlap_T_2) @[Controller.scala 200:71]
    is_D_rs2_E_rd_overlap <= _is_D_rs2_E_rd_overlap_T_3 @[Controller.scala 200:27]
    node _is_DE_overlap_T = or(is_D_rs1_E_rd_overlap, is_D_rs2_E_rd_overlap) @[Controller.scala 201:45]
    is_DE_overlap <= _is_DE_overlap_T @[Controller.scala 201:19]
    node _io_stall_T = eq(IN_E_OP_REG, UInt<5>("h0")) @[Controller.scala 202:30]
    node _io_stall_T_1 = and(_io_stall_T, is_DE_overlap) @[Controller.scala 202:66]
    io.stall <= _io_stall_T_1 @[Controller.scala 202:14]
    io.E_op <= IN_E_OP_REG @[Controller.scala 208:13]
    io.E_f3 <= IN_E_F3_REG @[Controller.scala 209:13]
    io.E_f7 <= IN_E_F7_REG @[Controller.scala 210:13]
    io.next_pc_sel <= UInt<1>("h0") @[Controller.scala 213:25]
    io.E_jb_op1_sel <= UInt<1>("h0") @[Controller.scala 214:25]
    io.E_alu_op1_sel <= UInt<1>("h0") @[Controller.scala 215:25]
    io.E_alu_op2_sel <= UInt<1>("h0") @[Controller.scala 216:25]
    node _T_27 = eq(UInt<5>("h1b"), IN_E_OP_REG) @[Controller.scala 218:24]
    when _T_27 : @[Controller.scala 218:24]
      io.next_pc_sel <= UInt<1>("h1") @[Controller.scala 220:33]
      io.E_jb_op1_sel <= UInt<1>("h0") @[Controller.scala 221:33]
      io.E_alu_op1_sel <= UInt<1>("h0") @[Controller.scala 222:33]
      io.E_alu_op2_sel <= UInt<1>("h0") @[Controller.scala 223:33]
    else :
      node _T_28 = eq(UInt<5>("h19"), IN_E_OP_REG) @[Controller.scala 218:24]
      when _T_28 : @[Controller.scala 218:24]
        io.next_pc_sel <= UInt<1>("h1") @[Controller.scala 226:33]
        io.E_jb_op1_sel <= UInt<1>("h1") @[Controller.scala 227:33]
        io.E_alu_op1_sel <= UInt<1>("h0") @[Controller.scala 228:33]
        io.E_alu_op2_sel <= UInt<1>("h0") @[Controller.scala 229:33]
      else :
        node _T_29 = eq(UInt<5>("h18"), IN_E_OP_REG) @[Controller.scala 218:24]
        when _T_29 : @[Controller.scala 218:24]
          io.next_pc_sel <= io.alu_out @[Controller.scala 232:33]
          io.E_jb_op1_sel <= UInt<1>("h0") @[Controller.scala 233:33]
          io.E_alu_op1_sel <= UInt<1>("h1") @[Controller.scala 234:33]
          io.E_alu_op2_sel <= UInt<1>("h1") @[Controller.scala 235:33]
        else :
          node _T_30 = eq(UInt<5>("hc"), IN_E_OP_REG) @[Controller.scala 218:24]
          when _T_30 : @[Controller.scala 218:24]
            io.next_pc_sel <= UInt<1>("h0") @[Controller.scala 238:33]
            io.E_jb_op1_sel <= UInt<1>("h0") @[Controller.scala 239:33]
            io.E_alu_op1_sel <= UInt<1>("h1") @[Controller.scala 240:33]
            io.E_alu_op2_sel <= UInt<1>("h1") @[Controller.scala 241:33]
          else :
            node _T_31 = eq(UInt<5>("h4"), IN_E_OP_REG) @[Controller.scala 218:24]
            when _T_31 : @[Controller.scala 218:24]
              io.next_pc_sel <= UInt<1>("h0") @[Controller.scala 244:33]
              io.E_jb_op1_sel <= UInt<1>("h0") @[Controller.scala 245:33]
              io.E_alu_op1_sel <= UInt<1>("h1") @[Controller.scala 246:33]
              io.E_alu_op2_sel <= UInt<1>("h0") @[Controller.scala 247:33]
            else :
              node _T_32 = eq(UInt<5>("h0"), IN_E_OP_REG) @[Controller.scala 218:24]
              when _T_32 : @[Controller.scala 218:24]
                io.next_pc_sel <= UInt<1>("h0") @[Controller.scala 250:33]
                io.E_jb_op1_sel <= UInt<1>("h0") @[Controller.scala 251:33]
                io.E_alu_op1_sel <= UInt<1>("h1") @[Controller.scala 252:33]
                io.E_alu_op2_sel <= UInt<1>("h0") @[Controller.scala 253:33]
              else :
                node _T_33 = eq(UInt<5>("h8"), IN_E_OP_REG) @[Controller.scala 218:24]
                when _T_33 : @[Controller.scala 218:24]
                  io.next_pc_sel <= UInt<1>("h0") @[Controller.scala 256:33]
                  io.E_jb_op1_sel <= UInt<1>("h0") @[Controller.scala 257:33]
                  io.E_alu_op1_sel <= UInt<1>("h1") @[Controller.scala 258:33]
                  io.E_alu_op2_sel <= UInt<1>("h0") @[Controller.scala 259:33]
                else :
                  node _T_34 = eq(UInt<5>("h5"), IN_E_OP_REG) @[Controller.scala 218:24]
                  when _T_34 : @[Controller.scala 218:24]
                    io.next_pc_sel <= UInt<1>("h0") @[Controller.scala 262:33]
                    io.E_jb_op1_sel <= UInt<1>("h0") @[Controller.scala 263:33]
                    io.E_alu_op1_sel <= UInt<1>("h0") @[Controller.scala 264:33]
                    io.E_alu_op2_sel <= UInt<1>("h0") @[Controller.scala 265:33]
                  else :
                    node _T_35 = eq(UInt<5>("hd"), IN_E_OP_REG) @[Controller.scala 218:24]
                    when _T_35 : @[Controller.scala 218:24]
                      io.next_pc_sel <= UInt<1>("h0") @[Controller.scala 268:33]
                      io.E_jb_op1_sel <= UInt<1>("h0") @[Controller.scala 269:33]
                      io.E_alu_op1_sel <= UInt<1>("h0") @[Controller.scala 270:33]
                      io.E_alu_op2_sel <= UInt<1>("h0") @[Controller.scala 271:33]
    node _T_36 = eq(IN_M_OP_REG, UInt<5>("h8")) @[Controller.scala 276:22]
    when _T_36 : @[Controller.scala 276:56]
      io.M_dm_w_en <= UInt<4>("h0") @[Controller.scala 277:22]
      node _T_37 = eq(UInt<1>("h0"), IN_M_F3_REG) @[Controller.scala 278:28]
      when _T_37 : @[Controller.scala 278:28]
        io.M_dm_w_en <= UInt<4>("h1") @[Controller.scala 280:30]
      else :
        node _T_38 = eq(UInt<1>("h1"), IN_M_F3_REG) @[Controller.scala 278:28]
        when _T_38 : @[Controller.scala 278:28]
          io.M_dm_w_en <= UInt<4>("h3") @[Controller.scala 283:30]
        else :
          node _T_39 = eq(UInt<2>("h2"), IN_M_F3_REG) @[Controller.scala 278:28]
          when _T_39 : @[Controller.scala 278:28]
            io.M_dm_w_en <= UInt<4>("hf") @[Controller.scala 286:30]
    else :
      io.M_dm_w_en <= UInt<4>("h0") @[Controller.scala 290:22]
    io.W_rd_index <= IN_W_RD_REG @[Controller.scala 294:21]
    io.W_f3 <= IN_W_F3_REG @[Controller.scala 295:21]
    node _T_40 = eq(IN_W_OP_REG, UInt<5>("h18")) @[Controller.scala 298:21]
    node _T_41 = eq(IN_W_OP_REG, UInt<5>("h8")) @[Controller.scala 299:21]
    node _T_42 = or(_T_40, _T_41) @[Controller.scala 298:55]
    when _T_42 : @[Controller.scala 300:6]
      io.W_wb_en <= UInt<1>("h0") @[Controller.scala 301:20]
      io.W_wb_data_sel <= UInt<1>("h0") @[Controller.scala 302:26]
    else :
      io.W_wb_en <= UInt<1>("h1") @[Controller.scala 304:20]
      node _T_43 = eq(IN_W_OP_REG, UInt<5>("h0")) @[Controller.scala 305:26]
      when _T_43 : @[Controller.scala 305:61]
        io.W_wb_data_sel <= UInt<1>("h0") @[Controller.scala 306:30]
      else :
        io.W_wb_data_sel <= UInt<1>("h1") @[Controller.scala 308:30]
    io.F_im_w_en <= UInt<4>("h0") @[Controller.scala 311:18]

  module Top :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip mem_read_test : UInt<1>, flip mem_addr_test : UInt<32>, mem_data_test : UInt<32>}

    inst reg_pc of Reg_PC @[Top.scala 16:33]
    reg_pc.clock <= clock
    reg_pc.reset <= reset
    inst im of SRAM @[Top.scala 17:33]
    im.clock <= clock
    im.reset <= reset
    inst reg_d of Reg_D @[Top.scala 18:33]
    reg_d.clock <= clock
    reg_d.reset <= reset
    inst decoder of Decoder @[Top.scala 19:33]
    decoder.clock <= clock
    decoder.reset <= reset
    inst imm_ext of Imm_Ext @[Top.scala 20:33]
    imm_ext.clock <= clock
    imm_ext.reset <= reset
    inst regfile of RegFile @[Top.scala 21:33]
    regfile.clock <= clock
    regfile.reset <= reset
    inst reg_e of Reg_E @[Top.scala 22:33]
    reg_e.clock <= clock
    reg_e.reset <= reset
    inst alu of ALU @[Top.scala 23:33]
    alu.clock <= clock
    alu.reset <= reset
    inst jb_unit of JB_Unit @[Top.scala 24:33]
    jb_unit.clock <= clock
    jb_unit.reset <= reset
    inst reg_m of Reg_M @[Top.scala 25:33]
    reg_m.clock <= clock
    reg_m.reset <= reset
    inst dm of SRAM_dm @[Top.scala 26:33]
    dm.clock <= clock
    dm.reset <= reset
    inst reg_w of Reg_W @[Top.scala 27:33]
    reg_w.clock <= clock
    reg_w.reset <= reset
    inst Ld_filter of LD_Filter @[Top.scala 28:33]
    Ld_filter.clock <= clock
    Ld_filter.reset <= reset
    inst controller of Controller @[Top.scala 29:33]
    controller.clock <= clock
    controller.reset <= reset
    wire to_pc_reg : UInt<32> @[Top.scala 35:39]
    wire out_pc_reg : UInt<32> @[Top.scala 36:39]
    wire out_Reg_D_pc : UInt<32> @[Top.scala 37:39]
    wire out_Reg_E_pc : UInt<32> @[Top.scala 38:39]
    wire inst_to_Reg_D : UInt<32> @[Top.scala 40:39]
    wire inst_out_Reg_D : UInt<32> @[Top.scala 41:39]
    wire opcode : UInt<5> @[Top.scala 43:39]
    wire func3 : UInt<3> @[Top.scala 44:39]
    wire func7 : UInt<1> @[Top.scala 45:39]
    wire rs1_index : UInt<5> @[Top.scala 46:39]
    wire rs2_index : UInt<5> @[Top.scala 47:39]
    wire rd_index : UInt<5> @[Top.scala 48:39]
    wire to_Reg_E_sext_imme : UInt<32> @[Top.scala 50:39]
    wire out_Reg_E_sext_imme : UInt<32> @[Top.scala 51:39]
    wire out_reg_file_rs1_data : UInt<32> @[Top.scala 53:39]
    wire out_reg_file_rs2_data : UInt<32> @[Top.scala 54:39]
    wire to_Reg_E_rs1_data : UInt<32> @[Top.scala 55:39]
    wire to_Reg_E_rs2_data : UInt<32> @[Top.scala 56:39]
    wire rs1_data : UInt<32> @[Top.scala 57:39]
    wire rs2_data : UInt<32> @[Top.scala 58:39]
    wire rs1_data_final : UInt<32> @[Top.scala 60:39]
    wire rs2_data_final : UInt<32> @[Top.scala 61:39]
    wire alu_out : UInt<32> @[Top.scala 63:39]
    wire alu_out_forward : UInt<32> @[Top.scala 64:39]
    wire out_Reg_M_rs2_data : UInt<32> @[Top.scala 66:39]
    wire to_Reg_W_ld_data : UInt<32> @[Top.scala 68:39]
    wire out_Reg_W_ld_data : UInt<32> @[Top.scala 69:39]
    wire out_Reg_W_alu_out : UInt<32> @[Top.scala 70:39]
    wire ld_data_f : UInt<32> @[Top.scala 71:39]
    wire wb_data : UInt<32> @[Top.scala 72:39]
    wire jb_pc : UInt<32> @[Top.scala 73:39]
    wire alu_src1_mux : UInt<32> @[Top.scala 74:39]
    wire alu_src2_mux : UInt<32> @[Top.scala 75:39]
    wire jb_src_mux : UInt<32> @[Top.scala 76:39]
    wire next_pc_sel : UInt<1> @[Top.scala 79:39]
    wire stall : UInt<1> @[Top.scala 80:39]
    wire F_im_w_en : UInt<4> @[Top.scala 81:39]
    wire D_rs1_data_sel : UInt<1> @[Top.scala 82:39]
    wire D_rs2_data_sel : UInt<1> @[Top.scala 83:39]
    wire E_rs1_data_sel : UInt<2> @[Top.scala 85:39]
    wire E_rs2_data_sel : UInt<2> @[Top.scala 86:39]
    wire E_jb_op1_sel : UInt<1> @[Top.scala 87:39]
    wire E_alu_op1_sel : UInt<1> @[Top.scala 88:39]
    wire E_alu_op2_sel : UInt<1> @[Top.scala 89:39]
    wire E_op : UInt<5> @[Top.scala 90:39]
    wire E_f3 : UInt<3> @[Top.scala 91:39]
    wire E_f7 : UInt<1> @[Top.scala 92:39]
    wire M_dm_w_en : UInt<4> @[Top.scala 94:39]
    wire W_wb_en : UInt<1> @[Top.scala 96:39]
    wire W_rd_index : UInt<5> @[Top.scala 97:39]
    wire W_f3 : UInt<3> @[Top.scala 98:39]
    wire W_wb_sel : UInt<1> @[Top.scala 99:39]
    node _to_pc_reg_T = add(out_pc_reg, UInt<3>("h4")) @[Top.scala 102:71]
    node _to_pc_reg_T_1 = tail(_to_pc_reg_T, 1) @[Top.scala 102:71]
    node _to_pc_reg_T_2 = mux(next_pc_sel, jb_pc, _to_pc_reg_T_1) @[Top.scala 102:39]
    to_pc_reg <= _to_pc_reg_T_2 @[Top.scala 102:33]
    reg_pc.io.stall <= stall @[Top.scala 103:33]
    reg_pc.io.next_pc <= to_pc_reg @[Top.scala 104:33]
    out_pc_reg <= reg_pc.io.current_pc @[Top.scala 105:33]
    im.io.w_en <= F_im_w_en @[Top.scala 108:33]
    node _im_io_address_T = bits(out_pc_reg, 15, 0) @[Top.scala 109:46]
    im.io.address <= _im_io_address_T @[Top.scala 109:33]
    im.io.write_data <= UInt<32>("h0") @[Top.scala 110:33]
    inst_to_Reg_D <= im.io.read_data @[Top.scala 111:33]
    reg_d.io.stall <= stall @[Top.scala 114:33]
    reg_d.io.jb <= next_pc_sel @[Top.scala 115:33]
    reg_d.io.pc <= out_pc_reg @[Top.scala 116:33]
    reg_d.io.inst <= inst_to_Reg_D @[Top.scala 117:33]
    out_Reg_D_pc <= reg_d.io.out_Reg_D_pc @[Top.scala 118:33]
    inst_out_Reg_D <= reg_d.io.out_Reg_D_inst @[Top.scala 119:33]
    decoder.io.inst <= inst_out_Reg_D @[Top.scala 122:33]
    opcode <= decoder.io.dc_out_opcode @[Top.scala 123:33]
    func3 <= decoder.io.dc_out_func3 @[Top.scala 124:33]
    func7 <= decoder.io.dc_out_func7 @[Top.scala 125:33]
    rs1_index <= decoder.io.dc_out_rs1_index @[Top.scala 126:33]
    rs2_index <= decoder.io.dc_out_rs2_index @[Top.scala 127:33]
    rd_index <= decoder.io.dc_out_rd_index @[Top.scala 128:33]
    imm_ext.io.inst <= inst_out_Reg_D @[Top.scala 131:33]
    to_Reg_E_sext_imme <= imm_ext.io.imm_ext_out @[Top.scala 132:33]
    node _wb_data_T = mux(W_wb_sel, out_Reg_W_alu_out, ld_data_f) @[Top.scala 135:39]
    wb_data <= _wb_data_T @[Top.scala 135:33]
    regfile.io.wb_en <= W_wb_en @[Top.scala 136:33]
    regfile.io.wb_data <= wb_data @[Top.scala 137:33]
    regfile.io.rd_index <= W_rd_index @[Top.scala 138:33]
    regfile.io.rs1_index <= rs1_index @[Top.scala 139:33]
    regfile.io.rs2_index <= rs2_index @[Top.scala 140:33]
    out_reg_file_rs1_data <= regfile.io.rs1_data_out @[Top.scala 141:33]
    out_reg_file_rs2_data <= regfile.io.rs2_data_out @[Top.scala 142:33]
    node _to_Reg_E_rs1_data_T = mux(D_rs1_data_sel, wb_data, out_reg_file_rs1_data) @[Top.scala 145:39]
    to_Reg_E_rs1_data <= _to_Reg_E_rs1_data_T @[Top.scala 145:33]
    node _to_Reg_E_rs2_data_T = mux(D_rs2_data_sel, wb_data, out_reg_file_rs2_data) @[Top.scala 146:39]
    to_Reg_E_rs2_data <= _to_Reg_E_rs2_data_T @[Top.scala 146:33]
    reg_e.io.stall <= stall @[Top.scala 147:33]
    reg_e.io.jb <= next_pc_sel @[Top.scala 148:33]
    reg_e.io.pc <= out_Reg_D_pc @[Top.scala 149:33]
    reg_e.io.rs1_data <= to_Reg_E_rs1_data @[Top.scala 150:33]
    reg_e.io.rs2_data <= to_Reg_E_rs2_data @[Top.scala 151:33]
    reg_e.io.sext_imme <= to_Reg_E_sext_imme @[Top.scala 152:33]
    out_Reg_E_pc <= reg_e.io.out_Reg_E_pc @[Top.scala 153:33]
    rs1_data <= reg_e.io.out_Reg_E_rs1_data @[Top.scala 154:33]
    rs2_data <= reg_e.io.out_Reg_E_rs2_data @[Top.scala 155:33]
    out_Reg_E_sext_imme <= reg_e.io.out_Reg_E_sext_imme @[Top.scala 156:33]
    node _rs1_data_final_T = eq(UInt<2>("h0"), E_rs1_data_sel) @[Mux.scala 81:61]
    node _rs1_data_final_T_1 = mux(_rs1_data_final_T, wb_data, wb_data) @[Mux.scala 81:58]
    node _rs1_data_final_T_2 = eq(UInt<2>("h1"), E_rs1_data_sel) @[Mux.scala 81:61]
    node _rs1_data_final_T_3 = mux(_rs1_data_final_T_2, alu_out_forward, _rs1_data_final_T_1) @[Mux.scala 81:58]
    node _rs1_data_final_T_4 = eq(UInt<2>("h2"), E_rs1_data_sel) @[Mux.scala 81:61]
    node _rs1_data_final_T_5 = mux(_rs1_data_final_T_4, rs1_data, _rs1_data_final_T_3) @[Mux.scala 81:58]
    rs1_data_final <= _rs1_data_final_T_5 @[Top.scala 159:33]
    node _rs2_data_final_T = eq(UInt<2>("h0"), E_rs2_data_sel) @[Mux.scala 81:61]
    node _rs2_data_final_T_1 = mux(_rs2_data_final_T, wb_data, wb_data) @[Mux.scala 81:58]
    node _rs2_data_final_T_2 = eq(UInt<2>("h1"), E_rs2_data_sel) @[Mux.scala 81:61]
    node _rs2_data_final_T_3 = mux(_rs2_data_final_T_2, alu_out_forward, _rs2_data_final_T_1) @[Mux.scala 81:58]
    node _rs2_data_final_T_4 = eq(UInt<2>("h2"), E_rs2_data_sel) @[Mux.scala 81:61]
    node _rs2_data_final_T_5 = mux(_rs2_data_final_T_4, rs2_data, _rs2_data_final_T_3) @[Mux.scala 81:58]
    rs2_data_final <= _rs2_data_final_T_5 @[Top.scala 164:33]
    node _alu_src1_mux_T = mux(E_alu_op1_sel, rs1_data_final, out_Reg_E_pc) @[Top.scala 169:39]
    alu_src1_mux <= _alu_src1_mux_T @[Top.scala 169:33]
    node _alu_src2_mux_T = mux(E_alu_op2_sel, rs2_data_final, out_Reg_E_sext_imme) @[Top.scala 170:39]
    alu_src2_mux <= _alu_src2_mux_T @[Top.scala 170:33]
    alu.io.opcode <= E_op @[Top.scala 173:33]
    alu.io.func3 <= E_f3 @[Top.scala 174:33]
    alu.io.func7 <= E_f7 @[Top.scala 175:33]
    alu.io.operand1 <= alu_src1_mux @[Top.scala 176:33]
    alu.io.operand2 <= alu_src2_mux @[Top.scala 177:33]
    alu_out <= alu.io.alu_out @[Top.scala 178:33]
    node _jb_src_mux_T = mux(E_jb_op1_sel, rs1_data_final, out_Reg_E_pc) @[Top.scala 180:39]
    jb_src_mux <= _jb_src_mux_T @[Top.scala 180:33]
    jb_unit.io.operand1 <= jb_src_mux @[Top.scala 183:33]
    jb_unit.io.operand2 <= out_Reg_E_sext_imme @[Top.scala 184:33]
    jb_pc <= jb_unit.io.jb_out @[Top.scala 185:33]
    reg_m.io.alu_out <= alu_out @[Top.scala 188:33]
    reg_m.io.rs2_data <= rs2_data_final @[Top.scala 189:33]
    alu_out_forward <= reg_m.io.out_Reg_M_alu_out @[Top.scala 190:33]
    out_Reg_M_rs2_data <= reg_m.io.out_Reg_M_rs2_data @[Top.scala 191:33]
    dm.io.w_en <= M_dm_w_en @[Top.scala 194:33]
    node _dm_io_address_T = bits(alu_out_forward, 15, 0) @[Top.scala 195:51]
    dm.io.address <= _dm_io_address_T @[Top.scala 195:33]
    dm.io.write_data <= out_Reg_M_rs2_data @[Top.scala 196:33]
    to_Reg_W_ld_data <= dm.io.read_data @[Top.scala 197:33]
    reg_w.io.alu_out <= alu_out_forward @[Top.scala 200:33]
    reg_w.io.ld_data <= to_Reg_W_ld_data @[Top.scala 201:33]
    out_Reg_W_alu_out <= reg_w.io.out_Reg_W_alu_out @[Top.scala 202:33]
    out_Reg_W_ld_data <= reg_w.io.out_Reg_W_ld_data @[Top.scala 203:33]
    Ld_filter.io.func3 <= W_f3 @[Top.scala 206:33]
    Ld_filter.io.ld_data <= out_Reg_W_ld_data @[Top.scala 207:33]
    ld_data_f <= Ld_filter.io.ld_data_f @[Top.scala 208:33]
    controller.io.op <= opcode @[Top.scala 211:33]
    controller.io.f3 <= func3 @[Top.scala 212:33]
    controller.io.rd <= rd_index @[Top.scala 213:33]
    controller.io.rs1 <= rs1_index @[Top.scala 214:33]
    controller.io.rs2 <= rs2_index @[Top.scala 215:33]
    controller.io.f7 <= func7 @[Top.scala 216:33]
    node _controller_io_alu_out_T = bits(alu_out, 0, 0) @[Top.scala 217:43]
    controller.io.alu_out <= _controller_io_alu_out_T @[Top.scala 217:33]
    stall <= controller.io.stall @[Top.scala 218:33]
    next_pc_sel <= controller.io.next_pc_sel @[Top.scala 219:33]
    F_im_w_en <= controller.io.F_im_w_en @[Top.scala 220:33]
    D_rs1_data_sel <= controller.io.D_rs1_data_sel @[Top.scala 221:33]
    D_rs2_data_sel <= controller.io.D_rs2_data_sel @[Top.scala 222:33]
    E_rs1_data_sel <= controller.io.E_rs1_data_sel @[Top.scala 223:33]
    E_rs2_data_sel <= controller.io.E_rs2_data_sel @[Top.scala 224:33]
    E_jb_op1_sel <= controller.io.E_jb_op1_sel @[Top.scala 225:33]
    E_alu_op1_sel <= controller.io.E_alu_op1_sel @[Top.scala 226:33]
    E_alu_op2_sel <= controller.io.E_alu_op2_sel @[Top.scala 227:33]
    E_op <= controller.io.E_op @[Top.scala 228:33]
    E_f3 <= controller.io.E_f3 @[Top.scala 229:33]
    E_f7 <= controller.io.E_f7 @[Top.scala 230:33]
    M_dm_w_en <= controller.io.M_dm_w_en @[Top.scala 231:33]
    W_wb_en <= controller.io.W_wb_en @[Top.scala 232:33]
    W_rd_index <= controller.io.W_rd_index @[Top.scala 233:33]
    W_f3 <= controller.io.W_f3 @[Top.scala 234:33]
    W_wb_sel <= controller.io.W_wb_data_sel @[Top.scala 235:33]
    dm.io.mem_read_test <= io.mem_read_test @[Top.scala 240:33]
    dm.io.mem_addr_test <= io.mem_addr_test @[Top.scala 241:33]
    io.mem_data_test <= dm.io.mem_data_test @[Top.scala 242:33]

