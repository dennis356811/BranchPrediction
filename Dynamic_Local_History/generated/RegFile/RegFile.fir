circuit RegFile :
  module RegFile :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip wb_en : UInt<1>, flip wb_data : UInt<32>, flip rd_index : UInt<5>, flip rs1_index : UInt<5>, flip rs2_index : UInt<5>, rs1_data_out : UInt<32>, rs2_data_out : UInt<32>}

    wire _registers_WIRE : UInt<32>[32] @[RegFile.scala 51:34]
    _registers_WIRE[0] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[1] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[2] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[3] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[4] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[5] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[6] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[7] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[8] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[9] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[10] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[11] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[12] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[13] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[14] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[15] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[16] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[17] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[18] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[19] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[20] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[21] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[22] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[23] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[24] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[25] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[26] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[27] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[28] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[29] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[30] <= UInt<32>("h0") @[RegFile.scala 51:34]
    _registers_WIRE[31] <= UInt<32>("h0") @[RegFile.scala 51:34]
    reg registers : UInt<32>[32], clock with :
      reset => (reset, _registers_WIRE) @[RegFile.scala 51:26]
    node _T = neq(io.rd_index, UInt<1>("h0")) @[RegFile.scala 53:32]
    node _T_1 = and(io.wb_en, _T) @[RegFile.scala 53:17]
    when _T_1 : @[RegFile.scala 53:41]
      registers[io.rd_index] <= io.wb_data @[RegFile.scala 54:28]
    node _io_rs1_data_out_T = eq(io.rs1_index, UInt<1>("h0")) @[RegFile.scala 57:39]
    node _io_rs1_data_out_T_1 = mux(_io_rs1_data_out_T, UInt<1>("h0"), registers[io.rs1_index]) @[RegFile.scala 57:25]
    io.rs1_data_out <= _io_rs1_data_out_T_1 @[RegFile.scala 57:19]
    node _io_rs2_data_out_T = eq(io.rs2_index, UInt<1>("h0")) @[RegFile.scala 58:39]
    node _io_rs2_data_out_T_1 = mux(_io_rs2_data_out_T, UInt<1>("h0"), registers[io.rs2_index]) @[RegFile.scala 58:25]
    io.rs2_data_out <= _io_rs2_data_out_T_1 @[RegFile.scala 58:19]

