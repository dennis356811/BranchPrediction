circuit BPU :
  module BPU :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip IF_pc : UInt<32>, flip IF_inst : UInt<32>, flip EXE_pc : UInt<32>, flip EXE_op : UInt<5>, flip alu_out : UInt<1>, flip stall : UInt<1>, flip jump : UInt<1>, flip jb_pc : UInt<32>, predict : UInt<1>, predict_miss : UInt<1>, BTB_miss : UInt<1>, next_pc : UInt<32>}

    wire _BHT_WIRE : UInt<2>[32] @[BPU.scala 27:38]
    _BHT_WIRE[0] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[1] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[2] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[3] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[4] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[5] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[6] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[7] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[8] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[9] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[10] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[11] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[12] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[13] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[14] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[15] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[16] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[17] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[18] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[19] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[20] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[21] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[22] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[23] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[24] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[25] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[26] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[27] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[28] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[29] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[30] <= UInt<2>("h3") @[BPU.scala 27:38]
    _BHT_WIRE[31] <= UInt<2>("h3") @[BPU.scala 27:38]
    reg BHT : UInt<2>[32], clock with :
      reset => (reset, _BHT_WIRE) @[BPU.scala 27:30]
    wire _BTB_WIRE : UInt<32>[32] @[BPU.scala 28:38]
    _BTB_WIRE[0] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[1] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[2] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[3] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[4] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[5] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[6] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[7] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[8] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[9] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[10] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[11] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[12] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[13] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[14] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[15] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[16] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[17] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[18] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[19] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[20] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[21] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[22] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[23] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[24] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[25] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[26] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[27] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[28] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[29] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[30] <= UInt<32>("h0") @[BPU.scala 28:38]
    _BTB_WIRE[31] <= UInt<32>("h0") @[BPU.scala 28:38]
    reg BTB : UInt<32>[32], clock with :
      reset => (reset, _BTB_WIRE) @[BPU.scala 28:30]
    wire _BTB_valid_WIRE : UInt<1>[32] @[BPU.scala 29:38]
    _BTB_valid_WIRE[0] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[1] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[2] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[3] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[4] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[5] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[6] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[7] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[8] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[9] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[10] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[11] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[12] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[13] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[14] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[15] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[16] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[17] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[18] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[19] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[20] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[21] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[22] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[23] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[24] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[25] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[26] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[27] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[28] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[29] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[30] <= UInt<1>("h0") @[BPU.scala 29:38]
    _BTB_valid_WIRE[31] <= UInt<1>("h0") @[BPU.scala 29:38]
    reg BTB_valid : UInt<1>[32], clock with :
      reset => (reset, _BTB_valid_WIRE) @[BPU.scala 29:30]
    wire _LHT_WIRE : UInt<5>[8] @[BPU.scala 30:38]
    _LHT_WIRE[0] <= UInt<5>("h0") @[BPU.scala 30:38]
    _LHT_WIRE[1] <= UInt<5>("h0") @[BPU.scala 30:38]
    _LHT_WIRE[2] <= UInt<5>("h0") @[BPU.scala 30:38]
    _LHT_WIRE[3] <= UInt<5>("h0") @[BPU.scala 30:38]
    _LHT_WIRE[4] <= UInt<5>("h0") @[BPU.scala 30:38]
    _LHT_WIRE[5] <= UInt<5>("h0") @[BPU.scala 30:38]
    _LHT_WIRE[6] <= UInt<5>("h0") @[BPU.scala 30:38]
    _LHT_WIRE[7] <= UInt<5>("h0") @[BPU.scala 30:38]
    reg LHT : UInt<5>[8], clock with :
      reset => (reset, _LHT_WIRE) @[BPU.scala 30:30]
    reg delay : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[BPU.scala 32:30]
    reg last_predict : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[BPU.scala 33:30]
    reg delay_pc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[BPU.scala 34:30]
    reg last_pc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[BPU.scala 35:30]
    node _IF_is_B_type_T = bits(io.IF_inst, 6, 0) @[BPU.scala 37:33]
    node IF_is_B_type = eq(_IF_is_B_type_T, UInt<7>("h63")) @[BPU.scala 37:40]
    node EXE_is_B_type = eq(io.EXE_op, UInt<5>("h18")) @[BPU.scala 38:33]
    node _IF_B_index_T = bits(io.IF_pc, 4, 2) @[BPU.scala 40:35]
    node _EXE_B_index_T = bits(io.EXE_pc, 4, 2) @[BPU.scala 41:36]
    node _io_BTB_miss_T = and(EXE_is_B_type, last_predict) @[BPU.scala 43:38]
    node _io_BTB_miss_T_1 = neq(BTB[LHT[_EXE_B_index_T]], io.jb_pc) @[BPU.scala 43:75]
    node _io_BTB_miss_T_2 = and(_io_BTB_miss_T, _io_BTB_miss_T_1) @[BPU.scala 43:54]
    io.BTB_miss <= _io_BTB_miss_T_2 @[BPU.scala 43:21]
    node _io_predict_T = and(BTB_valid[LHT[_IF_B_index_T]], IF_is_B_type) @[BPU.scala 44:46]
    node _io_predict_T_1 = geq(BHT[LHT[_IF_B_index_T]], UInt<2>("h2")) @[BPU.scala 44:81]
    node _io_predict_T_2 = and(_io_predict_T, _io_predict_T_1) @[BPU.scala 44:62]
    io.predict <= _io_predict_T_2 @[BPU.scala 44:21]
    node _io_predict_miss_T = xor(last_predict, io.alu_out) @[BPU.scala 45:55]
    node _io_predict_miss_T_1 = and(EXE_is_B_type, _io_predict_miss_T) @[BPU.scala 45:38]
    io.predict_miss <= _io_predict_miss_T_1 @[BPU.scala 45:21]
    node _io_next_pc_T = mux(last_predict, last_pc, io.jb_pc) @[BPU.scala 48:41]
    node _io_next_pc_T_1 = add(io.IF_pc, UInt<3>("h4")) @[BPU.scala 50:59]
    node _io_next_pc_T_2 = tail(_io_next_pc_T_1, 1) @[BPU.scala 50:59]
    node _io_next_pc_T_3 = mux(io.predict, BTB[LHT[_IF_B_index_T]], _io_next_pc_T_2) @[BPU.scala 50:20]
    node _io_next_pc_T_4 = mux(io.BTB_miss, io.jb_pc, _io_next_pc_T_3) @[BPU.scala 49:20]
    node _io_next_pc_T_5 = mux(io.predict_miss, _io_next_pc_T, _io_next_pc_T_4) @[BPU.scala 48:20]
    node _io_next_pc_T_6 = mux(io.jump, io.jb_pc, _io_next_pc_T_5) @[BPU.scala 47:20]
    io.next_pc <= _io_next_pc_T_6 @[BPU.scala 47:14]
    when io.stall : @[BPU.scala 52:18]
      delay <= delay @[BPU.scala 53:18]
      last_predict <= last_predict @[BPU.scala 54:18]
      delay_pc <= delay_pc @[BPU.scala 55:18]
      last_pc <= last_pc @[BPU.scala 56:18]
    else :
      delay <= io.predict @[BPU.scala 58:18]
      last_predict <= delay @[BPU.scala 59:18]
      node _delay_pc_T = add(io.IF_pc, UInt<3>("h4")) @[BPU.scala 60:30]
      node _delay_pc_T_1 = tail(_delay_pc_T, 1) @[BPU.scala 60:30]
      delay_pc <= _delay_pc_T_1 @[BPU.scala 60:18]
      last_pc <= delay_pc @[BPU.scala 61:18]
    when EXE_is_B_type : @[BPU.scala 64:23]
      when last_predict : @[BPU.scala 65:24]
        when io.alu_out : @[BPU.scala 66:23]
          node _BHT_T = eq(BHT[LHT[_EXE_B_index_T]], UInt<2>("h3")) @[BPU.scala 67:56]
          node _BHT_T_1 = add(BHT[LHT[_EXE_B_index_T]], UInt<1>("h1")) @[BPU.scala 67:87]
          node _BHT_T_2 = tail(_BHT_T_1, 1) @[BPU.scala 67:87]
          node _BHT_T_3 = mux(_BHT_T, UInt<2>("h3"), _BHT_T_2) @[BPU.scala 67:38]
          BHT[LHT[_EXE_B_index_T]] <= _BHT_T_3 @[BPU.scala 67:32]
          BTB[LHT[_EXE_B_index_T]] <= io.jb_pc @[BPU.scala 68:32]
          BTB_valid[LHT[_EXE_B_index_T]] <= UInt<1>("h1") @[BPU.scala 69:32]
        else :
          node _BHT_T_4 = eq(BHT[LHT[_EXE_B_index_T]], UInt<1>("h0")) @[BPU.scala 71:56]
          node _BHT_T_5 = sub(BHT[LHT[_EXE_B_index_T]], UInt<1>("h1")) @[BPU.scala 71:87]
          node _BHT_T_6 = tail(_BHT_T_5, 1) @[BPU.scala 71:87]
          node _BHT_T_7 = mux(_BHT_T_4, UInt<1>("h0"), _BHT_T_6) @[BPU.scala 71:38]
          BHT[LHT[_EXE_B_index_T]] <= _BHT_T_7 @[BPU.scala 71:32]
      else :
        when io.alu_out : @[BPU.scala 74:23]
          node _BHT_T_8 = eq(BHT[LHT[_EXE_B_index_T]], UInt<2>("h3")) @[BPU.scala 75:56]
          node _BHT_T_9 = add(BHT[LHT[_EXE_B_index_T]], UInt<1>("h1")) @[BPU.scala 75:87]
          node _BHT_T_10 = tail(_BHT_T_9, 1) @[BPU.scala 75:87]
          node _BHT_T_11 = mux(_BHT_T_8, UInt<2>("h3"), _BHT_T_10) @[BPU.scala 75:38]
          BHT[LHT[_EXE_B_index_T]] <= _BHT_T_11 @[BPU.scala 75:32]
          BTB[LHT[_EXE_B_index_T]] <= io.jb_pc @[BPU.scala 76:32]
          BTB_valid[LHT[_EXE_B_index_T]] <= UInt<1>("h1") @[BPU.scala 77:32]
        else :
          node _BHT_T_12 = eq(BHT[LHT[_EXE_B_index_T]], UInt<1>("h0")) @[BPU.scala 79:56]
          node _BHT_T_13 = sub(BHT[LHT[_EXE_B_index_T]], UInt<1>("h1")) @[BPU.scala 79:87]
          node _BHT_T_14 = tail(_BHT_T_13, 1) @[BPU.scala 79:87]
          node _BHT_T_15 = mux(_BHT_T_12, UInt<1>("h0"), _BHT_T_14) @[BPU.scala 79:38]
          BHT[LHT[_EXE_B_index_T]] <= _BHT_T_15 @[BPU.scala 79:32]
      node _T = bits(io.EXE_pc, 4, 2) @[BPU.scala 82:18]
      node _LHT_T = bits(io.EXE_pc, 4, 2) @[BPU.scala 82:51]
      node _LHT_T_1 = shl(LHT[_LHT_T], 1) @[BPU.scala 82:68]
      node _LHT_T_2 = or(_LHT_T_1, io.alu_out) @[BPU.scala 82:74]
      LHT[_T] <= _LHT_T_2 @[BPU.scala 82:34]

